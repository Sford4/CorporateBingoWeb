{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/joinGameContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\nexport const JoinGameContext = createContext();\n\nconst JoinGameContextProvider = props => {\n  const router = useRouter();\n  const {\n    0: accessBoards,\n    1: setAccessBoards\n  } = useState([]);\n  const {\n    0: foundBoards,\n    1: setFoundBoards\n  } = useState([]);\n  const {\n    0: usedBoardIDs,\n    1: setUsedBoardIDs\n  } = useState([]);\n  const {\n    0: usedGameIDs,\n    1: setUsedGameIDs\n  } = useState([]);\n\n  const getAccessBoards = async userID => {\n    console.log('getting access boards', userID);\n\n    try {\n      const request = await fetch(`${FULL_URL}/games/user/${userID}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        }\n      });\n      const result = await request.json();\n      console.log({\n        result\n      });\n      setAccessBoards(result.games);\n      setUsedGameIDs(result.gameIDs);\n      setUsedBoardIDs(result.boardIDs);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const findBoards = async accessCode => {\n    try {\n      const request = await fetch(`${FULL_URL}/games/search`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify({\n          accessCode,\n          gamesAlreadyFound: usedGameIDs,\n          boardsAlreadyFound: usedBoardIDs\n        })\n      });\n      const success = await request.json();\n      console.log({\n        success\n      });\n\n      if (success.error) {\n        alert(success.error.message);\n        return;\n      }\n\n      if (success) {\n        setFoundBoards(success);\n      } else {\n        alert('There was a problem finding the game you searched for... please try again later!');\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return __jsx(JoinGameContext.Provider, {\n    value: {\n      accessBoards,\n      getAccessBoards,\n      foundBoards,\n      findBoards,\n      setFoundBoards\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default JoinGameContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/joinGameContext.js"],"names":["React","createContext","useState","useEffect","useRouter","fetch","FULL_URL","JoinGameContext","JoinGameContextProvider","props","router","accessBoards","setAccessBoards","foundBoards","setFoundBoards","usedBoardIDs","setUsedBoardIDs","usedGameIDs","setUsedGameIDs","getAccessBoards","userID","console","log","request","method","headers","localStorage","getItem","result","json","games","gameIDs","boardIDs","err","alert","findBoards","accessCode","body","gamesAlreadyFound","boardsAlreadyFound","success","error","message","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\n\nexport const JoinGameContext = createContext();\n\nconst JoinGameContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ accessBoards, setAccessBoards ] = useState([]);\n    const [ foundBoards, setFoundBoards ] = useState([]);\n    const [ usedBoardIDs, setUsedBoardIDs ] = useState([]);\n    const [ usedGameIDs, setUsedGameIDs ] = useState([]);\n\n    const getAccessBoards = async (userID) => {\n        console.log('getting access boards', userID)\n        try {  \n            const request = await fetch(`${FULL_URL}/games/user/${userID}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                })\n                const result = await request.json();\n                console.log({result})\n                setAccessBoards(result.games);\n                setUsedGameIDs(result.gameIDs);\n                setUsedBoardIDs(result.boardIDs);\n        } catch(err) {alert(err)}\n    }\n\n    const findBoards = async (accessCode) => {\n        try {\n            const request = await fetch(`${FULL_URL}/games/search`, {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify({\n                    accessCode,\n                    gamesAlreadyFound: usedGameIDs,\n                    boardsAlreadyFound: usedBoardIDs,\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success.error){\n                  alert(success.error.message);\n                  return;\n              }\n              if(success){\n                setFoundBoards(success);\n              } else {\n                  alert('There was a problem finding the game you searched for... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n\n    return (\n        <JoinGameContext.Provider \n            value={{ \n                accessBoards, \n                getAccessBoards, \n                foundBoards, \n                findBoards,\n                setFoundBoards\n            }}>\n            {props.children}\n        </JoinGameContext.Provider>\n    )\n}\n\nexport default JoinGameContextProvider;"]},"metadata":{},"sourceType":"module"}