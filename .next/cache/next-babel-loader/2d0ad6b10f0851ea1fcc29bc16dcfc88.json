{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\n\nvar uuidv4 = require('uuid/v4');\n\nexport var ManageBoardsContext = createContext();\n\nvar ManageBoardsContextProvider = function ManageBoardsContextProvider(props) {\n  var router = useRouter();\n\n  var _useState = useState({}),\n      contextBoard = _useState[0],\n      setContextBoard = _useState[1];\n\n  var _useState2 = useState([]),\n      gamesForBoard = _useState2[0],\n      setGamesForBoard = _useState2[1];\n\n  var _useState3 = useState(false),\n      stuffToSave = _useState3[0],\n      setStuffToSave = _useState3[1];\n\n  var newBoard =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(orgID) {\n      var request, boardID;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return fetch(\"\".concat(FULL_URL, \"/boards\"), {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: _JSON$stringify({\n                  orgID: orgID\n                })\n              });\n\n            case 3:\n              request = _context.sent;\n              _context.next = 6;\n              return request.json();\n\n            case 6:\n              boardID = _context.sent;\n              console.log({\n                boardID: boardID\n              });\n              router.push(\"/manageBoards/\".concat(boardID));\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 11]]);\n    }));\n\n    return function newBoard(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getBoard =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(boardID) {\n      var request, board;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(boardID && contextBoard.id === boardID)) {\n                _context2.next = 3;\n                break;\n              }\n\n              console.log('go with same board', contextBoard, boardID);\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              _context2.prev = 3;\n              _context2.next = 6;\n              return fetch(\"\".concat(FULL_URL, \"/boards/\").concat(boardID), {\n                method: 'POST' // headers: {\n                //     'Accept': 'application/json',\n                //     'Content-Type': 'application/json',\n                //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n\n              });\n\n            case 6:\n              request = _context2.sent;\n              _context2.next = 9;\n              return request.json();\n\n            case 9:\n              board = _context2.sent;\n              setContextBoard(board);\n              _context2.next = 16;\n              break;\n\n            case 13:\n              _context2.prev = 13;\n              _context2.t0 = _context2[\"catch\"](3);\n              alert(_context2.t0);\n\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 13]]);\n    }));\n\n    return function getBoard(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var saveBoard =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var teamsNoFrontendIDs, request, success;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('SAVING');\n\n              if (contextBoard.useTeams) {\n                teamsNoFrontendIDs = contextBoard.teams.map(function (team) {\n                  if (!team.id || team.id.includes('team')) {\n                    return {\n                      name: team.name,\n                      accessCode: team.accessCode,\n                      id: uuidv4()\n                    };\n                  }\n\n                  return team;\n                });\n                contextBoard.teams = teamsNoFrontendIDs;\n              }\n\n              _context3.prev = 2;\n              _context3.next = 5;\n              return fetch(\"\".concat(FULL_URL, \"/boards/update/\").concat(contextBoard.id), {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: _JSON$stringify(_objectSpread({}, contextBoard, {\n                  modified: new Date()\n                }))\n              });\n\n            case 5:\n              request = _context3.sent;\n              _context3.next = 8;\n              return request.json();\n\n            case 8:\n              success = _context3.sent;\n              console.log({\n                success: success\n              });\n\n              if (success) {\n                setStuffToSave(false);\n                setContextBoard(success);\n              } else {\n                alert('There was a problem saving your board... please try again later!');\n              }\n\n              _context3.next = 16;\n              break;\n\n            case 13:\n              _context3.prev = 13;\n              _context3.t0 = _context3[\"catch\"](2);\n              alert(_context3.t0);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 13]]);\n    }));\n\n    return function saveBoard() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var getAllGamesForBoard =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(boardID) {\n      var request, games;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return fetch(\"\".concat(FULL_URL, \"/boards/gamesForBoard/\").concat(boardID), {\n                method: 'GET' // headers: {\n                //         'Accept': 'application/json',\n                //         'Content-Type': 'application/json',\n                //         'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                //     },\n\n              });\n\n            case 3:\n              request = _context4.sent;\n              _context4.next = 6;\n              return request.json();\n\n            case 6:\n              games = _context4.sent;\n              setGamesForBoard(!games.length ? ['none'] : games);\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              alert(_context4.t0);\n\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[0, 10]]);\n    }));\n\n    return function getAllGamesForBoard(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(ManageBoardsContext.Provider, {\n    value: {\n      contextBoard: contextBoard,\n      updateBoard: setContextBoard,\n      getBoard: getBoard,\n      newBoard: newBoard,\n      setStuffToSave: setStuffToSave,\n      stuffToSave: stuffToSave,\n      saveBoard: saveBoard,\n      getAllGamesForBoard: getAllGamesForBoard,\n      gamesForBoard: gamesForBoard\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ManageBoardsContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js"],"names":["React","createContext","useState","useEffect","useRouter","fetch","FULL_URL","uuidv4","require","ManageBoardsContext","ManageBoardsContextProvider","props","router","contextBoard","setContextBoard","gamesForBoard","setGamesForBoard","stuffToSave","setStuffToSave","newBoard","orgID","method","body","request","json","boardID","console","log","push","alert","getBoard","id","board","saveBoard","useTeams","teamsNoFrontendIDs","teams","map","team","includes","name","accessCode","modified","Date","success","getAllGamesForBoard","games","length","updateBoard","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\nconst uuidv4 = require('uuid/v4');\n\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ contextBoard, setContextBoard ] = useState({});\n    const [ gamesForBoard, setGamesForBoard ] = useState([]);\n    const [ stuffToSave, setStuffToSave ] = useState(false);\n\n    const newBoard = async (orgID) => {\n        try {\n            const request = await fetch(`${FULL_URL}/boards`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify({\n                    orgID: orgID\n                })\n              })\n              const boardID = await request.json();\n              console.log({boardID})\n              router.push(`/manageBoards/${boardID}`);\n\n        } catch(err) {alert(err)}\n    }\n\n    const getBoard = async (boardID) => {\n        if(boardID && contextBoard.id === boardID){\n            console.log('go with same board', contextBoard, boardID)\n            return;\n        }\n        try {\n            const request = await fetch(`${FULL_URL}/boards/${boardID}`, {\n                method: 'POST',\n                // headers: {\n                //     'Accept': 'application/json',\n                //     'Content-Type': 'application/json',\n                //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                })\n                const board = await request.json();\n                setContextBoard(board);\n        } catch(err) {alert(err)}\n    }\n\n    const saveBoard = async () => {\n        console.log('SAVING');\n        if(contextBoard.useTeams){\n            const teamsNoFrontendIDs = contextBoard.teams.map(team => {\n                if(!team.id || team.id.includes('team')){\n                    return {\n                        name: team.name,\n                        accessCode: team.accessCode,\n                        id: uuidv4()\n                    }\n                }\n                return team\n            })\n            contextBoard.teams = teamsNoFrontendIDs;\n        }\n        try {\n            const request = await fetch(`${FULL_URL}/boards/update/${contextBoard.id}`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify({\n                    ...contextBoard,\n                    modified: new Date(),\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success){\n                setStuffToSave(false);\n                setContextBoard(success);\n              } else {\n                  alert('There was a problem saving your board... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n    const getAllGamesForBoard = async boardID => {\n        try {\n            const request = await fetch(`${FULL_URL}/boards/gamesForBoard/${boardID}`, {\n                method: 'GET',\n                // headers: {\n                //         'Accept': 'application/json',\n                //         'Content-Type': 'application/json',\n                //         'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                //     },\n                })\n                const games = await request.json();\n                setGamesForBoard(!games.length ? ['none'] : games);\n        } catch(err) {alert(err)}\n    }\n\n\n    return (\n        <ManageBoardsContext.Provider \n            value={{ \n                contextBoard, \n                updateBoard: setContextBoard, \n                getBoard, \n                newBoard, \n                setStuffToSave,\n                stuffToSave,\n                saveBoard,\n                getAllGamesForBoard,\n                gamesForBoard,\n            }}>\n            {props.children}\n        </ManageBoardsContext.Provider>\n    )\n}\n\nexport default ManageBoardsContextProvider;"]},"metadata":{},"sourceType":"module"}