{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/joinGameContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\nexport var JoinGameContext = createContext();\n\nvar JoinGameContextProvider = function JoinGameContextProvider(props) {\n  var router = useRouter();\n\n  var _useState = useState([]),\n      accessBoards = _useState[0],\n      setAccessBoards = _useState[1];\n\n  var _useState2 = useState([]),\n      foundBoards = _useState2[0],\n      setFoundBoards = _useState2[1];\n\n  var _useState3 = useState([]),\n      usedBoardIDs = _useState3[0],\n      setUsedBoardIDs = _useState3[1];\n\n  var _useState4 = useState([]),\n      usedGameIDs = _useState4[0],\n      setUsedGameIDs = _useState4[1];\n\n  var getAccessBoards =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(userID) {\n      var request, result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              console.log('getting access boards', userID);\n              _context.prev = 1;\n              _context.next = 4;\n              return fetch(\"\".concat(FULL_URL, \"/games/user\"), {\n                method: 'POST',\n                // headers: {\n                //     'Accept': 'application/json',\n                //     'Content-Type': 'application/json',\n                //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: _JSON$stringify({\n                  userID: userID\n                })\n              });\n\n            case 4:\n              request = _context.sent;\n              _context.next = 7;\n              return request.json();\n\n            case 7:\n              result = _context.sent;\n              console.log({\n                result: result\n              });\n              setAccessBoards(result.games);\n              _context.next = 15;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              alert(_context.t0);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 12]]);\n    }));\n\n    return function getAccessBoards(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var findBoards =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(accessCode) {\n      var request, success;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return fetch(\"\".concat(FULL_URL, \"/games/search\"), {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: _JSON$stringify({\n                  accessCode: accessCode\n                })\n              });\n\n            case 3:\n              request = _context2.sent;\n              _context2.next = 6;\n              return request.json();\n\n            case 6:\n              success = _context2.sent;\n              console.log({\n                success: success\n              });\n\n              if (!success.error) {\n                _context2.next = 11;\n                break;\n              }\n\n              alert(success.error.message);\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              if (success) {\n                setFoundBoards(success);\n              } else {\n                alert('There was a problem finding the game you searched for... please try again later!');\n              }\n\n              _context2.next = 17;\n              break;\n\n            case 14:\n              _context2.prev = 14;\n              _context2.t0 = _context2[\"catch\"](0);\n              alert(_context2.t0);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 14]]);\n    }));\n\n    return function findBoards(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(JoinGameContext.Provider, {\n    value: {\n      accessBoards: accessBoards,\n      getAccessBoards: getAccessBoards,\n      foundBoards: foundBoards,\n      findBoards: findBoards,\n      setFoundBoards: setFoundBoards\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default JoinGameContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/joinGameContext.js"],"names":["React","createContext","useState","useEffect","useRouter","fetch","FULL_URL","JoinGameContext","JoinGameContextProvider","props","router","accessBoards","setAccessBoards","foundBoards","setFoundBoards","usedBoardIDs","setUsedBoardIDs","usedGameIDs","setUsedGameIDs","getAccessBoards","userID","console","log","method","body","request","json","result","games","alert","findBoards","accessCode","success","error","message","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\n\nexport const JoinGameContext = createContext();\n\nconst JoinGameContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ accessBoards, setAccessBoards ] = useState([]);\n    const [ foundBoards, setFoundBoards ] = useState([]);\n    const [ usedBoardIDs, setUsedBoardIDs ] = useState([]);\n    const [ usedGameIDs, setUsedGameIDs ] = useState([]);\n\n    const getAccessBoards = async (userID) => {\n        console.log('getting access boards', userID)\n        try {  \n            const request = await fetch(`${FULL_URL}/games/user`, {\n                    method: 'POST',\n                    // headers: {\n                    //     'Accept': 'application/json',\n                    //     'Content-Type': 'application/json',\n                    //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                    // },\n                    body: JSON.stringify({\n                        userID\n                    })\n                })\n                const result = await request.json();\n                console.log({result})\n                setAccessBoards(result.games);\n        } catch(err) {alert(err)}\n    }\n\n    const findBoards = async (accessCode) => {\n        try {\n            const request = await fetch(`${FULL_URL}/games/search`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify({\n                    accessCode,\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success.error){\n                  alert(success.error.message);\n                  return;\n              }\n              if(success){\n                setFoundBoards(success);\n              } else {\n                  alert('There was a problem finding the game you searched for... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n\n    return (\n        <JoinGameContext.Provider \n            value={{ \n                accessBoards, \n                getAccessBoards, \n                foundBoards, \n                findBoards,\n                setFoundBoards\n            }}>\n            {props.children}\n        </JoinGameContext.Provider>\n    )\n}\n\nexport default JoinGameContextProvider;"]},"metadata":{},"sourceType":"module"}