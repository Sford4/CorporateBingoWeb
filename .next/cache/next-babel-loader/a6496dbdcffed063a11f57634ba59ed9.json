{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BoardBuilderBoard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../../styles/masterStyles'; // Context imports\n\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext'; // Data imports\n\nimport { boardTemplates } from '../../../constants/boardSizes';\nimport { checkForRewards } from '../../../funcs/boardLogic'; // Component imports\n\nimport SquareBuilder from './SquareBuilder';\nimport RewardBuilder from './RewardBuilder'; // Material ui\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const {\n    children,\n    classes,\n    onClose\n  } = props;\n  return __jsx(MuiDialogTitle, {\n    disableTypography: true,\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, children), __jsx(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n});\n\nconst BoardBuilderBoard = props => {\n  const SQUARE_WIDTH = 70 / (Math.sqrt(props.board.numSquares) + 1);\n  let taskNum = 1;\n  const {\n    contextBoard,\n    updateBoard\n  } = useContext(ManageBoardsContext);\n  const {\n    0: board,\n    1: setBoard\n  } = useState(props.board);\n  const {\n    0: rewardDialogOpen,\n    1: setRewardDialogOpen\n  } = useState(false);\n  const {\n    0: reward,\n    1: setReward\n  } = useState({});\n  const {\n    0: taskDialogOpen,\n    1: setTaskDialogOpen\n  } = useState(false);\n  const {\n    0: task,\n    1: setTask\n  } = useState({});\n\n  const openRewardBuilderPopup = reward => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  };\n\n  const openSquareBuilderPopup = task => {\n    setTaskDialogOpen(true);\n    setTask(task);\n  };\n\n  useEffect(() => {\n    setBoard(contextBoard);\n  }, [contextBoard]);\n\n  const generateRow = row => {\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = board.rewards.length ? board.rewards.filter(reward => reward.position === square.id)[0] : null;\n\n          if (!reward) {\n            return __jsx(\"div\", {\n              key: `empty${index}`,\n              style: {\n                width: `${SQUARE_WIDTH}vw`,\n                height: `${SQUARE_WIDTH}vw`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                maxWidth: 120,\n                maxHeight: 120\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88\n              },\n              __self: this\n            });\n          }\n\n          return __jsx(\"button\", {\n            key: `reward${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}vw`,\n              height: `${SQUARE_WIDTH}vw`,\n              // paddingTop: `${SQUARE_WIDTH * .72}%`,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: 'transparent',\n              border: 'none',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 120,\n              maxHeight: 120,\n              position: 'relative'\n            },\n            onClick: () => openRewardBuilderPopup(reward),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            style: _objectSpread({}, MASTER.smallRewardIcon, {\n              width: '70%',\n              height: '70%'\n            }),\n            src: !reward.title && !reward.description && !reward.img ? '../../static/gift_light_gray.png' : '../../static/gift_gray.png',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }));\n\n        case 'task':\n          if (!taskNum) {\n            return;\n          }\n\n          const task = board.squares[taskNum - 1];\n\n          if (taskNum === board.numSquares) {\n            taskNum = 0;\n          } else {\n            taskNum++;\n          }\n\n          if (task.freeSquare) {\n            return __jsx(\"button\", {\n              key: `free${index}`,\n              style: {\n                width: `${SQUARE_WIDTH}vw`,\n                height: `${SQUARE_WIDTH}vw`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                backgroundColor: `#${board.completeColor}`,\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                cursor: 'pointer',\n                maxWidth: 120,\n                maxHeight: 120,\n                position: 'relative'\n              },\n              onClick: () => openSquareBuilderPopup(task),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 140\n              },\n              __self: this\n            }, __jsx(\"img\", {\n              style: MASTER.freeSquareIcon,\n              src: '../../static/circle_check.png',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 160\n              },\n              __self: this\n            }));\n          }\n\n          return __jsx(\"button\", {\n            key: `task${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}vw`,\n              height: `${SQUARE_WIDTH}vw`,\n              paddingTop: `${SQUARE_WIDTH * .72}%`,\n              backgroundColor: task.freeSquare ? `#${board.completeColor}` : `#${board.incompleteColor}`,\n              borderWidth: 1,\n              borderColor: 'black',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 120,\n              maxHeight: 120,\n              position: 'relative'\n            },\n            onClick: () => openSquareBuilderPopup(task),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            style: MASTER.squareText,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, task.squareText));\n\n        case 'empty':\n          return __jsx(\"div\", {\n            key: `empty${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              paddingTop: `${SQUARE_WIDTH * .72}%`,\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          });\n\n        default:\n          return __jsx(\"div\", {\n            key: `empty${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              paddingTop: `${SQUARE_WIDTH * .72}%`,\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          });\n      }\n    });\n  };\n\n  const generateBoard = () => {\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return __jsx(\"div\", {\n        key: `row${index + 1}`,\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, generateRow(row));\n    });\n  };\n\n  if (board) {\n    return __jsx(\"div\", {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, generateBoard(props.board), __jsx(Dialog, {\n      open: rewardDialogOpen,\n      onBackdropClick: () => setRewardDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: () => setRewardDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"EDIT REWARD\"), __jsx(RewardBuilder, {\n      reward: reward,\n      openPopup: setRewardDialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })), __jsx(Dialog, {\n      open: taskDialogOpen,\n      onBackdropClick: () => setTaskDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: () => setTaskDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"EDIT TASK\"), __jsx(SquareBuilder, {\n      task: task,\n      openPopup: setTaskDialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n};\n\nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff'\n  }\n};\nexport default BoardBuilderBoard;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BoardBuilderBoard.js"],"names":["React","useState","useEffect","useContext","MASTER","COLORS","ManageBoardsContext","boardTemplates","checkForRewards","SquareBuilder","RewardBuilder","withStyles","Dialog","MuiDialogActions","MuiDialogTitle","Typography","IconButton","CloseIcon","materialStyles","theme","root","margin","padding","spacing","fontSize","color","primary","closeButton","position","right","top","palette","grey","DialogTitle","props","children","classes","onClose","BoardBuilderBoard","SQUARE_WIDTH","Math","sqrt","board","numSquares","taskNum","contextBoard","updateBoard","setBoard","rewardDialogOpen","setRewardDialogOpen","reward","setReward","taskDialogOpen","setTaskDialogOpen","task","setTask","openRewardBuilderPopup","openSquareBuilderPopup","generateRow","row","map","square","index","type","rewards","length","filter","id","width","height","paddingTop","maxWidth","maxHeight","display","alignItems","justifyContent","backgroundColor","border","outline","cursor","smallRewardIcon","title","description","img","squares","freeSquare","completeColor","borderWidth","borderColor","freeSquareIcon","incompleteColor","squareText","generateBoard","template","size","spaces","flexDirection","styles","container","flex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Data imports\nimport { boardTemplates } from '../../../constants/boardSizes';\nimport { checkForRewards } from '../../../funcs/boardLogic';\n\n// Component imports\nimport SquareBuilder from './SquareBuilder';\nimport RewardBuilder from './RewardBuilder';\n\n// Material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n    </MuiDialogTitle>\n  );\n});\n\nconst BoardBuilderBoard = (props) => {\n\n  const SQUARE_WIDTH = 70 / (Math.sqrt(props.board.numSquares) + 1);\n\n  let taskNum = 1;\n\n  const { contextBoard, updateBoard } = useContext(ManageBoardsContext);\n\n  const [board, setBoard] = useState(props.board);\n  const [rewardDialogOpen, setRewardDialogOpen] = useState(false);\n  const [reward, setReward] = useState({});\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n  const [task, setTask] = useState({});\n  \n  const openRewardBuilderPopup = (reward) => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  }\n\n  const openSquareBuilderPopup = (task) => {\n    setTaskDialogOpen(true);\n    setTask(task);\n  }\n\n  useEffect(() => {\n    setBoard(contextBoard)\n  }, [contextBoard])\n\n  const generateRow = row => {\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = board.rewards.length ?  board.rewards.filter(reward => reward.position === square.id)[0] : null;\n          if(!reward){\n            return <div key={`empty${index}`} \n                      style={{\n                        width: `${SQUARE_WIDTH}vw`,\n                        height: `${SQUARE_WIDTH}vw`,\n                        paddingTop: `${SQUARE_WIDTH * .72}%`,\n                        maxWidth: 120,\n                        maxHeight: 120,\n                      }} \n                    />;\n          }\n          return(\n              <button \n                key={`reward${index}`} \n                style={{\n                  width: `${SQUARE_WIDTH}vw`,\n                  height: `${SQUARE_WIDTH}vw`,\n                  // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: 'transparent',\n                  border: 'none',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 120,\n                  maxHeight: 120,\n                  position: 'relative',\n                }} \n                onClick={() => openRewardBuilderPopup(reward)}\n              >\n                <img \n                  style={{\n                    ...MASTER.smallRewardIcon,\n                    width: '70%',\n                    height: '70%',\n                  }} \n                  src={!reward.title && !reward.description && !reward.img ? '../../static/gift_light_gray.png' : '../../static/gift_gray.png'} \n                />\n              </button>\n          )\n        case 'task':\n          if(!taskNum){\n              return;\n          }\n          const task = board.squares[taskNum - 1];\n          if(taskNum === board.numSquares){\n            taskNum = 0;\n          }else {\n            taskNum++;\n          }\n          if(task.freeSquare){\n            return (\n              <button key={`free${index}`} \n                style={{ \n                  width: `${SQUARE_WIDTH}vw`,\n                  height: `${SQUARE_WIDTH}vw`,\n                  paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  backgroundColor: `#${board.completeColor}`,\n                  borderWidth: 1,\n                  borderColor: 'black',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 120,\n                  maxHeight: 120,\n                  position: 'relative',\n                  \n                }}\n                onClick={() => openSquareBuilderPopup(task)}\n              >\n                <img style={MASTER.freeSquareIcon} src={'../../static/circle_check.png'} />\n              </button>\n            )\n          }\n          return (\n            <button \n              key={`task${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}vw`,\n                height: `${SQUARE_WIDTH}vw`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                backgroundColor: task.freeSquare ? `#${board.completeColor}` : `#${board.incompleteColor}`,\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                cursor: 'pointer',\n                maxWidth: 120,\n                maxHeight: 120,\n                position: 'relative',\n              }}\n              onClick={() => openSquareBuilderPopup(task)}\n            >\n              <div style={MASTER.squareText}>{task.squareText}</div>\n            </button>\n          );\n        case 'empty':\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative',\n              }} \n            />\n          );\n        default:\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative',\n              }} \n            />\n          );\n      }\n    })\n  }\n\n  const generateBoard = () => {\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return (\n        <div \n          key={`row${index + 1}`} \n          style={{display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'center'}}\n        >\n          {generateRow(row)}\n        </div>\n      ) \n    });\n  }\n\n  if(board){\n    return (\n      <div style={styles.container}>\n        {generateBoard(props.board)}\n        <Dialog open={rewardDialogOpen} onBackdropClick={() => setRewardDialogOpen(false)}>\n          <DialogTitle onClose={() => setRewardDialogOpen(false)}>\n            EDIT REWARD\n          </DialogTitle>\n          <RewardBuilder reward={reward} openPopup={setRewardDialogOpen} />\n        </Dialog>\n        <Dialog open={taskDialogOpen} onBackdropClick={() => setTaskDialogOpen(false)}>\n           <DialogTitle onClose={() => setTaskDialogOpen(false)}>\n            EDIT TASK\n          </DialogTitle>\n          <SquareBuilder task={task} openPopup={setTaskDialogOpen} />\n        </Dialog>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n  \nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff',\n  },\n};\n\nexport default BoardBuilderBoard;"]},"metadata":{},"sourceType":"module"}