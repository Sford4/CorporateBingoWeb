{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BuildSquareComponents/BuildCodeTask.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react'; // Component imports\n\nimport { CSVDownload } from \"react-csv\"; // Material UI\n// import Switch from '@material-ui/core/Switch';\n\nimport Chip from '@material-ui/core/Chip'; // Style imports\n\nimport { MASTER, COLORS } from '../../../../styles/masterStyles';\n\nvar BuildCodeTask = function BuildCodeTask(props) {\n  var _useState = useState(props.task.codes.codeList),\n      codes = _useState[0],\n      setCodes = _useState[1];\n\n  var _useState2 = useState(''),\n      text = _useState2[0],\n      setText = _useState2[1]; // const [useOnce, setUseOnce] = useState(props.task.codes.useOnce);\n\n\n  var _useState3 = useState(false),\n      downloadCSV = _useState3[0],\n      setDownloadCSV = _useState3[1];\n\n  useEffect(function () {\n    setCodes(codes);\n  }, [props.task]);\n\n  var massageCSVData = function massageCSVData(data) {\n    return data.map(function (code) {\n      return [code];\n    });\n  };\n\n  var exportToCSV = function exportToCSV() {\n    setDownloadCSV(true); // reset component to be called again\n\n    setTimeout(function () {\n      setDownloadCSV(false);\n    }, 500);\n  }; // const handleUseOnceChange = () => {\n  //     setUseOnce(!useOnce)\n  //     props.updateTask('codes', {\n  //         codeList: codes,\n  //         useOnce: !useOnce,\n  //     });\n  // }\n\n\n  var handleCodeDelete = function handleCodeDelete(deadCode) {\n    var codeList = codes.filter(function (code) {\n      return code !== deadCode;\n    });\n    setCodes(codeList);\n    props.updateTask('codes', {\n      codeList: codeList,\n      useOnce: props.task.codes.useOnce\n    });\n  };\n\n  var addCode = function addCode(text) {\n    if (text) {\n      var codeList = codes;\n\n      if (!codeList.includes(text)) {\n        setText('');\n        codeList.push(text), props.updateTask('codes', {\n          codeList: codeList,\n          useOnce: props.task.codes.useOnce\n        });\n      } else {\n        alert(\"Cannot have two identical codes!\");\n      }\n    } else {\n      alert('Can\\'t add a blank code!');\n    }\n  };\n\n  var generateCodes = function generateCodes() {\n    return codes.map(function (code, index) {\n      return __jsx(Chip, {\n        key: \"code\".concat(index),\n        label: code,\n        onDelete: function onDelete() {\n          return handleCodeDelete(code);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      });\n    });\n  };\n\n  return __jsx(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: styles.row,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, codes.length ? __jsx(\"button\", {\n    style: _objectSpread({}, MASTER.wideRoundBtn, {\n      width: 50\n    }),\n    onClick: function onClick() {\n      return exportToCSV();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: '../../../../static/download_white.png',\n    alt: \"download\",\n    style: {\n      height: 25\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })) : null, __jsx(\"input\", {\n    style: _objectSpread({}, MASTER.wideRoundInput, {\n      width: 200\n    }),\n    value: text,\n    onChange: function onChange(e) {\n      return setText(e.target.value);\n    },\n    placeholder: 'e.g. foundIt5',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    style: _objectSpread({}, MASTER.wideRoundBtn, {\n      width: 80\n    }),\n    onClick: function onClick() {\n      return addCode(text);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: MASTER.wideRoundBtnText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"+ Add\"))), generateCodes(), downloadCSV ? __jsx(CSVDownload, {\n    data: massageCSVData(codes),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }) : null);\n};\n\nvar styles = {\n  row: {\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '90%',\n    justifyContent: 'center'\n  }\n};\nexport default BuildCodeTask;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BuildSquareComponents/BuildCodeTask.js"],"names":["React","useState","useEffect","CSVDownload","Chip","MASTER","COLORS","BuildCodeTask","props","task","codes","codeList","setCodes","text","setText","downloadCSV","setDownloadCSV","massageCSVData","data","map","code","exportToCSV","setTimeout","handleCodeDelete","deadCode","filter","updateTask","useOnce","addCode","includes","push","alert","generateCodes","index","styles","container","row","length","wideRoundBtn","width","height","wideRoundInput","e","target","value","wideRoundBtnText","display","alignItems","maxWidth","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, } from 'react';\n\n// Component imports\nimport { CSVDownload } from \"react-csv\";\n\n// Material UI\n// import Switch from '@material-ui/core/Switch';\nimport Chip from '@material-ui/core/Chip';\n\n// Style imports\nimport { MASTER, COLORS } from '../../../../styles/masterStyles';\n\n\nconst BuildCodeTask = (props) => {\n\n    const [codes, setCodes] = useState(props.task.codes.codeList);\n    const [text, setText] = useState('');\n    // const [useOnce, setUseOnce] = useState(props.task.codes.useOnce);\n    const [downloadCSV, setDownloadCSV] = useState(false);\n\n    useEffect(() => {\n        setCodes(codes)\n    }, [props.task])\n\n    const massageCSVData = data => {\n        return data.map(code => {\n            return [code];\n        });\n    }\n\n    const exportToCSV = () => {\n        setDownloadCSV(true)\n        // reset component to be called again\n        setTimeout(() => {\n          setDownloadCSV(false)\n        }, 500);\n      }\n\n    // const handleUseOnceChange = () => {\n    //     setUseOnce(!useOnce)\n    //     props.updateTask('codes', {\n    //         codeList: codes,\n    //         useOnce: !useOnce,\n    //     });\n    // }\n\n    const handleCodeDelete = deadCode => {\n        const codeList = codes.filter(code => code !== deadCode);\n        setCodes(codeList);\n        props.updateTask('codes', {\n            codeList,\n            useOnce: props.task.codes.useOnce,\n        });\n    }\n\n    const addCode = text => {\n        if(text){\n            const codeList = codes;\n            if(!codeList.includes(text)){\n                setText('');\n                codeList.push(text),\n                props.updateTask('codes', {\n                    codeList: codeList,\n                    useOnce: props.task.codes.useOnce,\n                });\n            } else {\n                alert(\"Cannot have two identical codes!\");\n            }\n        } else {\n            alert('Can\\'t add a blank code!');\n        }\n    }\n\n  const generateCodes = () => {\n    return codes.map((code, index) => {\n        return (\n            <Chip\n                key={`code${index}`}\n                label={code}\n                onDelete={() => handleCodeDelete(code)}\n            />\n        )\n    })\n  }\n\n  return (\n    <div style={styles.container}>\n        {/* <div style={styles.row}>\n            <Switch\n                onChange = {() => handleUseOnceChange()}\n                value = {useOnce}\n                checked={useOnce}\n            />\n            <span style={{ ...styles.inputLabel,  marginLeft: 5}}>Each code used only once</span>\n        </div> */}\n        <div style={styles.row}>\n            {codes.length ?\n                <button \n                    style={{ ...MASTER.wideRoundBtn, width: 50 }} \n                    onClick={() => exportToCSV()}\n                >\n                    <img src={'../../../../static/download_white.png'} alt='download' style={{ height: 25}}/>\n                </button> : null\n            }\n            <input \n                style={{ ...MASTER.wideRoundInput, width: 200 }} \n                value={text} \n                onChange={e => setText(e.target.value)} \n                placeholder={'e.g. foundIt5'}\n            />\n            <button \n                style={{ ...MASTER.wideRoundBtn, width: 80 }} \n                onClick={() => addCode(text)}\n            >\n                <span style={MASTER.wideRoundBtnText}>+ Add</span>\n            </button>\n        </div>\n        {generateCodes()}\n        {downloadCSV ? <CSVDownload data={massageCSVData(codes)}  /> : null}\n    </div>\n  );\n}\n  \nconst styles = {\n  row: {\n      display: 'flex',\n      alignItems: 'center',\n      maxWidth: '90%',\n      justifyContent: 'center',\n  }\n};\n\nexport default BuildCodeTask;"]},"metadata":{},"sourceType":"module"}