{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = props => {\n  const router = useRouter();\n  const {\n    0: contextBoard,\n    1: setContextBoard\n  } = useState({});\n  const {\n    0: stuffToSave,\n    1: setStuffToSave\n  } = useState(false);\n  useEffect(() => {\n    console.log('there\\'s stuff to save!');\n  }, [stuffToSave]);\n\n  const getBoard = async boardID => {\n    if (boardID && contextBoard._id === boardID) {\n      console.log('go with same board', contextBoard, boardID);\n      return;\n    }\n\n    try {\n      const request = await fetch(`http://localhost:8000/boards/${boardID}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        }\n      });\n      const board = await request.json();\n      setContextBoard(board);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const newBoard = async orgID => {\n    try {\n      const request = await fetch(`http://localhost:8000/boards`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify({\n          orgID: orgID\n        })\n      });\n      const boardID = await request.json();\n      router.push(`/manageBoards/${boardID}`);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const saveBoard = async () => {\n    console.log('SAVING');\n\n    try {\n      const request = await fetch(`http://localhost:8000/boards/${contextBoard._id}`, {\n        method: 'PATCH',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify(_objectSpread({}, contextBoard))\n      });\n      const success = await request.json();\n      console.log({\n        success\n      });\n\n      if (success) {\n        setStuffToSave(false);\n      } else {\n        alert('There was a problem saving your board... please try again later!');\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return __jsx(ManageBoardsContext.Provider, {\n    value: {\n      contextBoard,\n      updateBoard: setContextBoard,\n      getBoard,\n      newBoard,\n      setStuffToSave,\n      stuffToSave,\n      saveBoard\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ManageBoardsContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js"],"names":["React","createContext","useState","useEffect","useRouter","ManageBoardsContext","ManageBoardsContextProvider","props","router","contextBoard","setContextBoard","stuffToSave","setStuffToSave","console","log","getBoard","boardID","_id","request","fetch","method","headers","localStorage","getItem","board","json","err","alert","newBoard","orgID","body","push","saveBoard","success","updateBoard","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router'\n\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ contextBoard, setContextBoard ] = useState({});\n    const [ stuffToSave, setStuffToSave ] = useState(false);\n\n    useEffect(() => {\n        console.log('there\\'s stuff to save!')\n    }, [stuffToSave])\n\n    const getBoard = async (boardID) => {\n        if(boardID && contextBoard._id === boardID){\n            console.log('go with same board', contextBoard, boardID)\n            return;\n        }\n        try {\n            const request = await fetch(`http://localhost:8000/boards/${boardID}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                })\n                const board = await request.json();\n                setContextBoard(board);\n        } catch(err) {alert(err)}\n    }\n\n    const newBoard = async (orgID) => {\n        try {\n            const request = await fetch(`http://localhost:8000/boards`, {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify({\n                    orgID: orgID\n                })\n              })\n              const boardID = await request.json();\n              router.push(`/manageBoards/${boardID}`);\n\n        } catch(err) {alert(err)}\n    }\n\n    const saveBoard = async () => {\n        console.log('SAVING');\n        try {\n            const request = await fetch(`http://localhost:8000/boards/${contextBoard._id}`, {\n                method: 'PATCH',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify({\n                    ...contextBoard\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success){\n                setStuffToSave(false);\n              } else {\n                  alert('There was a problem saving your board... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n\n    return (\n        <ManageBoardsContext.Provider \n            value={{ \n                contextBoard, \n                updateBoard: setContextBoard, \n                getBoard, \n                newBoard, \n                setStuffToSave,\n                stuffToSave,\n                saveBoard\n            }}>\n            {props.children}\n        </ManageBoardsContext.Provider>\n    )\n}\n\nexport default ManageBoardsContextProvider;"]},"metadata":{},"sourceType":"module"}