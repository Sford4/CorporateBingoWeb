{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BoardBuilderBoard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../../styles/masterStyles'; // Context imports\n\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext'; // Data imports\n\nimport { boardTemplates } from '../../../constants/boardSizes';\nimport { checkForRewards } from '../../../funcs/boardLogic'; // Component imports\n\nimport SquareBuilder from './SquareBuilder';\nimport RewardBuilder from './RewardBuilder'; // Material ui\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nvar materialStyles = function materialStyles(theme) {\n  return {\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n      fontSize: 32,\n      color: COLORS.primary\n    },\n    closeButton: {\n      position: 'absolute',\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500]\n    }\n  };\n};\n\nvar DialogTitle = withStyles(materialStyles)(function (props) {\n  var children = props.children,\n      classes = props.classes,\n      onClose = props.onClose;\n  return __jsx(MuiDialogTitle, {\n    disableTypography: true,\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, children), __jsx(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n});\n\nvar BoardBuilderBoard = function BoardBuilderBoard(props) {\n  var SQUARE_WIDTH = 90 / (Math.sqrt(props.board.numSquares) + 1);\n  var taskNum = 1;\n\n  var _useContext = useContext(ManageBoardsContext),\n      contextBoard = _useContext.contextBoard,\n      updateBoard = _useContext.updateBoard;\n\n  var _useState = useState(props.board),\n      board = _useState[0],\n      setBoard = _useState[1];\n\n  var _useState2 = useState(false),\n      rewardDialogOpen = _useState2[0],\n      setRewardDialogOpen = _useState2[1];\n\n  var _useState3 = useState({}),\n      reward = _useState3[0],\n      setReward = _useState3[1];\n\n  var _useState4 = useState(false),\n      taskDialogOpen = _useState4[0],\n      setTaskDialogOpen = _useState4[1];\n\n  var _useState5 = useState({}),\n      task = _useState5[0],\n      setTask = _useState5[1];\n\n  var openRewardBuilderPopup = function openRewardBuilderPopup(reward) {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  };\n\n  var openSquareBuilderPopup = function openSquareBuilderPopup(task) {\n    setTaskDialogOpen(true);\n    setTask(task);\n  };\n\n  useEffect(function () {\n    setBoard(contextBoard);\n  }, [contextBoard]);\n\n  var generateRow = function generateRow(row) {\n    return row.map(function (square, index) {\n      switch (square.type) {\n        case 'reward':\n          var _reward = board.rewards.length ? board.rewards.filter(function (reward) {\n            return reward.position === square.id;\n          })[0] : null;\n\n          if (!_reward) {\n            return __jsx(\"div\", {\n              key: \"empty\".concat(index),\n              style: {\n                width: \"\".concat(SQUARE_WIDTH, \"%\"),\n                paddingTop: \"\".concat(SQUARE_WIDTH * .72, \"%\"),\n                maxWidth: 100,\n                maxHeight: 100\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 88\n              },\n              __self: this\n            });\n          }\n\n          return __jsx(\"button\", {\n            key: \"reward\".concat(index),\n            style: {\n              width: \"\".concat(SQUARE_WIDTH, \"%\"),\n              // paddingTop: `${SQUARE_WIDTH * .72}%`,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: 'transparent',\n              border: 'none',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            onClick: function onClick() {\n              return openRewardBuilderPopup(_reward);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            style: _objectSpread({}, MASTER.smallRewardIcon, {\n              width: '70%',\n              height: '70%'\n            }),\n            src: !_reward.title && !_reward.description && !_reward.img ? '../../static/gift_light_gray.png' : '../../static/gift_gray.png',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          }));\n\n        case 'task':\n          if (!taskNum) {\n            return;\n          }\n\n          var _task = board.squares[taskNum - 1];\n\n          if (taskNum === board.numSquares) {\n            taskNum = 0;\n          } else {\n            taskNum++;\n          }\n\n          if (_task.freeSquare) {\n            return __jsx(\"button\", {\n              key: \"free\".concat(index),\n              style: {\n                width: \"\".concat(SQUARE_WIDTH, \"%\"),\n                paddingTop: \"\".concat(SQUARE_WIDTH * .72, \"%\"),\n                backgroundColor: \"#\".concat(board.completeColor),\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                cursor: 'pointer',\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative'\n              },\n              onClick: function onClick() {\n                return openSquareBuilderPopup(_task);\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 138\n              },\n              __self: this\n            }, __jsx(\"img\", {\n              style: MASTER.freeSquareIcon,\n              src: '../../static/circle_check.png',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 157\n              },\n              __self: this\n            }));\n          }\n\n          return __jsx(\"button\", {\n            key: \"task\".concat(index),\n            style: {\n              width: \"\".concat(SQUARE_WIDTH, \"%\"),\n              paddingTop: \"\".concat(SQUARE_WIDTH * .72, \"%\"),\n              backgroundColor: _task.freeSquare ? \"#\".concat(board.completeColor) : \"#\".concat(board.incompleteColor),\n              borderWidth: 1,\n              borderColor: 'black',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            onClick: function onClick() {\n              return openSquareBuilderPopup(_task);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            style: MASTER.squareText,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, _task.squareText));\n\n        case 'empty':\n          return __jsx(\"div\", {\n            key: \"empty\".concat(index),\n            style: {\n              width: \"\".concat(SQUARE_WIDTH, \"%\"),\n              paddingTop: \"\".concat(SQUARE_WIDTH * .72, \"%\"),\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          });\n\n        default:\n          return __jsx(\"div\", {\n            key: \"empty\".concat(index),\n            style: {\n              width: \"\".concat(SQUARE_WIDTH, \"%\"),\n              paddingTop: \"\".concat(SQUARE_WIDTH * .72, \"%\"),\n              maxWidth: 120,\n              // maxHeight: 120,\n              position: 'relative'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          });\n      }\n    });\n  };\n\n  var generateBoard = function generateBoard() {\n    var template = boardTemplates[props.size];\n    return template.spaces.map(function (row, index) {\n      return __jsx(\"div\", {\n        key: \"row\".concat(index + 1),\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, generateRow(row));\n    });\n  };\n\n  if (board) {\n    return __jsx(\"div\", {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, generateBoard(props.board), __jsx(Dialog, {\n      open: rewardDialogOpen,\n      onBackdropClick: function onBackdropClick() {\n        return setRewardDialogOpen(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: function onClose() {\n        return setRewardDialogOpen(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \"EDIT REWARD\"), __jsx(RewardBuilder, {\n      reward: reward,\n      openPopup: setRewardDialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    })), __jsx(Dialog, {\n      open: taskDialogOpen,\n      onBackdropClick: function onBackdropClick() {\n        return setTaskDialogOpen(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: function onClose() {\n        return setTaskDialogOpen(false);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"EDIT TASK\"), __jsx(SquareBuilder, {\n      task: task,\n      openPopup: setTaskDialogOpen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n};\n\nvar styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff'\n  }\n};\nexport default BoardBuilderBoard;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/BoardBuilderBoard.js"],"names":["React","useState","useEffect","useContext","MASTER","COLORS","ManageBoardsContext","boardTemplates","checkForRewards","SquareBuilder","RewardBuilder","withStyles","Dialog","MuiDialogActions","MuiDialogTitle","Typography","IconButton","CloseIcon","materialStyles","theme","root","margin","padding","spacing","fontSize","color","primary","closeButton","position","right","top","palette","grey","DialogTitle","props","children","classes","onClose","BoardBuilderBoard","SQUARE_WIDTH","Math","sqrt","board","numSquares","taskNum","contextBoard","updateBoard","setBoard","rewardDialogOpen","setRewardDialogOpen","reward","setReward","taskDialogOpen","setTaskDialogOpen","task","setTask","openRewardBuilderPopup","openSquareBuilderPopup","generateRow","row","map","square","index","type","rewards","length","filter","id","width","paddingTop","maxWidth","maxHeight","display","alignItems","justifyContent","backgroundColor","border","outline","cursor","smallRewardIcon","height","title","description","img","squares","freeSquare","completeColor","borderWidth","borderColor","freeSquareIcon","incompleteColor","squareText","generateBoard","template","size","spaces","flexDirection","styles","container","flex"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD,C,CAGA;;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,8BAA/B,C,CAEA;;AACA,SAASC,mBAAT,QAAoC,uCAApC,C,CAEA;;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC,C,CAEA;;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAEA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,KAAK;AAAA,SAAK;AAC/BC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAE,CADJ;AAEJC,MAAAA,OAAO,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAFL;AAGJC,MAAAA,QAAQ,EAAE,EAHN;AAIJC,MAAAA,KAAK,EAAEpB,MAAM,CAACqB;AAJV,KADyB;AAO/BC,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,UADC;AAEXC,MAAAA,KAAK,EAAEV,KAAK,CAACI,OAAN,CAAc,CAAd,CAFI;AAGXO,MAAAA,GAAG,EAAEX,KAAK,CAACI,OAAN,CAAc,CAAd,CAHM;AAIXE,MAAAA,KAAK,EAAEN,KAAK,CAACY,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AAJI;AAPkB,GAAL;AAAA,CAA5B;;AAeA,IAAMC,WAAW,GAAGtB,UAAU,CAACO,cAAD,CAAV,CAA2B,UAAAgB,KAAK,EAAI;AAAA,MAC9CC,QAD8C,GACfD,KADe,CAC9CC,QAD8C;AAAA,MACpCC,OADoC,GACfF,KADe,CACpCE,OADoC;AAAA,MAC3BC,OAD2B,GACfH,KADe,CAC3BG,OAD2B;AAEtD,SACE,MAAC,cAAD;AAAgB,IAAA,iBAAiB,MAAjC;AAAkC,IAAA,SAAS,EAAED,OAAO,CAAChB,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0Be,QAA1B,CADF,EAEI,MAAC,UAAD;AAAY,kBAAW,OAAvB;AAA+B,IAAA,SAAS,EAAEC,OAAO,CAACT,WAAlD;AAA+D,IAAA,OAAO,EAAEU,OAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF;AAQD,CAVmB,CAApB;;AAYA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACJ,KAAD,EAAW;AAEnC,MAAMK,YAAY,GAAG,MAAMC,IAAI,CAACC,IAAL,CAAUP,KAAK,CAACQ,KAAN,CAAYC,UAAtB,IAAoC,CAA1C,CAArB;AAEA,MAAIC,OAAO,GAAG,CAAd;;AAJmC,oBAMGzC,UAAU,CAACG,mBAAD,CANb;AAAA,MAM3BuC,YAN2B,eAM3BA,YAN2B;AAAA,MAMbC,WANa,eAMbA,WANa;;AAAA,kBAQT7C,QAAQ,CAACiC,KAAK,CAACQ,KAAP,CARC;AAAA,MAQ5BA,KAR4B;AAAA,MAQrBK,QARqB;;AAAA,mBASa9C,QAAQ,CAAC,KAAD,CATrB;AAAA,MAS5B+C,gBAT4B;AAAA,MASVC,mBATU;;AAAA,mBAUPhD,QAAQ,CAAC,EAAD,CAVD;AAAA,MAU5BiD,MAV4B;AAAA,MAUpBC,SAVoB;;AAAA,mBAWSlD,QAAQ,CAAC,KAAD,CAXjB;AAAA,MAW5BmD,cAX4B;AAAA,MAWZC,iBAXY;;AAAA,mBAYXpD,QAAQ,CAAC,EAAD,CAZG;AAAA,MAY5BqD,IAZ4B;AAAA,MAYtBC,OAZsB;;AAcnC,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACN,MAAD,EAAY;AACzCD,IAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAE,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAHD;;AAKA,MAAMO,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACH,IAAD,EAAU;AACvCD,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAE,IAAAA,OAAO,CAACD,IAAD,CAAP;AACD,GAHD;;AAKApD,EAAAA,SAAS,CAAC,YAAM;AACd6C,IAAAA,QAAQ,CAACF,YAAD,CAAR;AACD,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT;;AAIA,MAAMa,WAAW,GAAG,SAAdA,WAAc,CAAAC,GAAG,EAAI;AACzB,WAAOA,GAAG,CAACC,GAAJ,CAAQ,UAACC,MAAD,EAASC,KAAT,EAAmB;AAChC,cAAQD,MAAM,CAACE,IAAf;AACE,aAAK,QAAL;AACE,cAAMb,OAAM,GAAGR,KAAK,CAACsB,OAAN,CAAcC,MAAd,GAAwBvB,KAAK,CAACsB,OAAN,CAAcE,MAAd,CAAqB,UAAAhB,MAAM;AAAA,mBAAIA,MAAM,CAACtB,QAAP,KAAoBiC,MAAM,CAACM,EAA/B;AAAA,WAA3B,EAA8D,CAA9D,CAAxB,GAA2F,IAA1G;;AACA,cAAG,CAACjB,OAAJ,EAAW;AACT,mBAAO;AAAK,cAAA,GAAG,iBAAUY,KAAV,CAAR;AACG,cAAA,KAAK,EAAE;AACLM,gBAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL8B,gBAAAA,UAAU,YAAK9B,YAAY,GAAG,GAApB,MAFL;AAGL+B,gBAAAA,QAAQ,EAAE,GAHL;AAILC,gBAAAA,SAAS,EAAE;AAJN,eADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAQD;;AACD,iBACI;AACE,YAAA,GAAG,kBAAWT,KAAX,CADL;AAEE,YAAA,KAAK,EAAE;AACLM,cAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL;AACAiC,cAAAA,OAAO,EAAE,MAHJ;AAILC,cAAAA,UAAU,EAAE,QAJP;AAKLC,cAAAA,cAAc,EAAE,QALX;AAMLC,cAAAA,eAAe,EAAE,aANZ;AAOLC,cAAAA,MAAM,EAAE,MAPH;AAQLC,cAAAA,OAAO,EAAE,MARJ;AASLC,cAAAA,MAAM,EAAE,SATH;AAULR,cAAAA,QAAQ,EAAE,GAVL;AAWL;AACA1C,cAAAA,QAAQ,EAAE;AAZL,aAFT;AAgBE,YAAA,OAAO,EAAE;AAAA,qBAAM4B,sBAAsB,CAACN,OAAD,CAA5B;AAAA,aAhBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAkBE;AACE,YAAA,KAAK,oBACA9C,MAAM,CAAC2E,eADP;AAEHX,cAAAA,KAAK,EAAE,KAFJ;AAGHY,cAAAA,MAAM,EAAE;AAHL,cADP;AAME,YAAA,GAAG,EAAE,CAAC9B,OAAM,CAAC+B,KAAR,IAAiB,CAAC/B,OAAM,CAACgC,WAAzB,IAAwC,CAAChC,OAAM,CAACiC,GAAhD,GAAsD,kCAAtD,GAA2F,4BANlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,CADJ;;AA6BF,aAAK,MAAL;AACE,cAAG,CAACvC,OAAJ,EAAY;AACR;AACH;;AACD,cAAMU,KAAI,GAAGZ,KAAK,CAAC0C,OAAN,CAAcxC,OAAO,GAAG,CAAxB,CAAb;;AACA,cAAGA,OAAO,KAAKF,KAAK,CAACC,UAArB,EAAgC;AAC9BC,YAAAA,OAAO,GAAG,CAAV;AACD,WAFD,MAEM;AACJA,YAAAA,OAAO;AACR;;AACD,cAAGU,KAAI,CAAC+B,UAAR,EAAmB;AACjB,mBACE;AAAQ,cAAA,GAAG,gBAASvB,KAAT,CAAX;AACE,cAAA,KAAK,EAAE;AACLM,gBAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL8B,gBAAAA,UAAU,YAAK9B,YAAY,GAAG,GAApB,MAFL;AAGLoC,gBAAAA,eAAe,aAAMjC,KAAK,CAAC4C,aAAZ,CAHV;AAILC,gBAAAA,WAAW,EAAE,CAJR;AAKLC,gBAAAA,WAAW,EAAE,OALR;AAMLhB,gBAAAA,OAAO,EAAE,MANJ;AAOLE,gBAAAA,cAAc,EAAE,QAPX;AAQLD,gBAAAA,UAAU,EAAE,QARP;AASLI,gBAAAA,OAAO,EAAE,MATJ;AAULC,gBAAAA,MAAM,EAAE,SAVH;AAWLR,gBAAAA,QAAQ,EAAE,GAXL;AAYL;AACA1C,gBAAAA,QAAQ,EAAE;AAbL,eADT;AAiBE,cAAA,OAAO,EAAE;AAAA,uBAAM6B,sBAAsB,CAACH,KAAD,CAA5B;AAAA,eAjBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAmBE;AAAK,cAAA,KAAK,EAAElD,MAAM,CAACqF,cAAnB;AAAmC,cAAA,GAAG,EAAE,+BAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,CADF;AAuBD;;AACD,iBACE;AACE,YAAA,GAAG,gBAAS3B,KAAT,CADL;AAEE,YAAA,KAAK,EAAE;AACLM,cAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL8B,cAAAA,UAAU,YAAK9B,YAAY,GAAG,GAApB,MAFL;AAGLoC,cAAAA,eAAe,EAAErB,KAAI,CAAC+B,UAAL,cAAsB3C,KAAK,CAAC4C,aAA5B,eAAkD5C,KAAK,CAACgD,eAAxD,CAHZ;AAILH,cAAAA,WAAW,EAAE,CAJR;AAKLC,cAAAA,WAAW,EAAE,OALR;AAMLhB,cAAAA,OAAO,EAAE,MANJ;AAOLE,cAAAA,cAAc,EAAE,QAPX;AAQLD,cAAAA,UAAU,EAAE,QARP;AASLI,cAAAA,OAAO,EAAE,MATJ;AAULC,cAAAA,MAAM,EAAE,SAVH;AAWLR,cAAAA,QAAQ,EAAE,GAXL;AAYL;AACA1C,cAAAA,QAAQ,EAAE;AAbL,aAFT;AAiBE,YAAA,OAAO,EAAE;AAAA,qBAAM6B,sBAAsB,CAACH,KAAD,CAA5B;AAAA,aAjBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAmBE;AAAK,YAAA,KAAK,EAAElD,MAAM,CAACuF,UAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAgCrC,KAAI,CAACqC,UAArC,CAnBF,CADF;;AAuBF,aAAK,OAAL;AACE,iBACE;AAAK,YAAA,GAAG,iBAAU7B,KAAV,CAAR;AACE,YAAA,KAAK,EAAE;AACLM,cAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL8B,cAAAA,UAAU,YAAK9B,YAAY,GAAG,GAApB,MAFL;AAGL+B,cAAAA,QAAQ,EAAE,GAHL;AAIL;AACA1C,cAAAA,QAAQ,EAAE;AALL,aADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;;AAWF;AACE,iBACE;AAAK,YAAA,GAAG,iBAAUkC,KAAV,CAAR;AACE,YAAA,KAAK,EAAE;AACLM,cAAAA,KAAK,YAAK7B,YAAL,MADA;AAEL8B,cAAAA,UAAU,YAAK9B,YAAY,GAAG,GAApB,MAFL;AAGL+B,cAAAA,QAAQ,EAAE,GAHL;AAIL;AACA1C,cAAAA,QAAQ,EAAE;AALL,aADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAjHJ;AA6HD,KA9HM,CAAP;AA+HD,GAhID;;AAkIA,MAAMgE,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAMC,QAAQ,GAAGtF,cAAc,CAAC2B,KAAK,CAAC4D,IAAP,CAA/B;AACA,WAAOD,QAAQ,CAACE,MAAT,CAAgBnC,GAAhB,CAAoB,UAACD,GAAD,EAAMG,KAAN,EAAgB;AACzC,aACE;AACE,QAAA,GAAG,eAAQA,KAAK,GAAG,CAAhB,CADL;AAEE,QAAA,KAAK,EAAE;AAACU,UAAAA,OAAO,EAAE,MAAV;AAAkBwB,UAAAA,aAAa,EAAE,KAAjC;AAAwC5B,UAAAA,KAAK,EAAE,MAA/C;AAAuDM,UAAAA,cAAc,EAAE;AAAvE,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIGhB,WAAW,CAACC,GAAD,CAJd,CADF;AAQD,KATM,CAAP;AAUD,GAZD;;AAcA,MAAGjB,KAAH,EAAS;AACP,WACE;AAAK,MAAA,KAAK,EAAEuD,MAAM,CAACC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,aAAa,CAAC1D,KAAK,CAACQ,KAAP,CADhB,EAEE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAEM,gBAAd;AAAgC,MAAA,eAAe,EAAE;AAAA,eAAMC,mBAAmB,CAAC,KAAD,CAAzB;AAAA,OAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAa,MAAA,OAAO,EAAE;AAAA,eAAMA,mBAAmB,CAAC,KAAD,CAAzB;AAAA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAIE,MAAC,aAAD;AAAe,MAAA,MAAM,EAAEC,MAAvB;AAA+B,MAAA,SAAS,EAAED,mBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAFF,EAQE,MAAC,MAAD;AAAQ,MAAA,IAAI,EAAEG,cAAd;AAA8B,MAAA,eAAe,EAAE;AAAA,eAAMC,iBAAiB,CAAC,KAAD,CAAvB;AAAA,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,MAAC,WAAD;AAAa,MAAA,OAAO,EAAE;AAAA,eAAMA,iBAAiB,CAAC,KAAD,CAAvB;AAAA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADH,EAIE,MAAC,aAAD;AAAe,MAAA,IAAI,EAAEC,IAArB;AAA2B,MAAA,SAAS,EAAED,iBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CARF,CADF;AAiBD,GAlBD,MAkBO;AACL,WAAO,IAAP;AACD;AACF,CAjMD;;AAmMA,IAAM4C,MAAM,GAAG;AACbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAET/B,IAAAA,KAAK,EAAE,MAFE;AAGTO,IAAAA,eAAe,EAAE;AAHR;AADE,CAAf;AAQA,eAAerC,iBAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Data imports\nimport { boardTemplates } from '../../../constants/boardSizes';\nimport { checkForRewards } from '../../../funcs/boardLogic';\n\n// Component imports\nimport SquareBuilder from './SquareBuilder';\nimport RewardBuilder from './RewardBuilder';\n\n// Material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n    </MuiDialogTitle>\n  );\n});\n\nconst BoardBuilderBoard = (props) => {\n\n  const SQUARE_WIDTH = 90 / (Math.sqrt(props.board.numSquares) + 1);\n\n  let taskNum = 1;\n\n  const { contextBoard, updateBoard } = useContext(ManageBoardsContext);\n\n  const [board, setBoard] = useState(props.board);\n  const [rewardDialogOpen, setRewardDialogOpen] = useState(false);\n  const [reward, setReward] = useState({});\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n  const [task, setTask] = useState({});\n  \n  const openRewardBuilderPopup = (reward) => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  }\n\n  const openSquareBuilderPopup = (task) => {\n    setTaskDialogOpen(true);\n    setTask(task);\n  }\n\n  useEffect(() => {\n    setBoard(contextBoard)\n  }, [contextBoard])\n\n  const generateRow = row => {\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = board.rewards.length ?  board.rewards.filter(reward => reward.position === square.id)[0] : null;\n          if(!reward){\n            return <div key={`empty${index}`} \n                      style={{\n                        width: `${SQUARE_WIDTH}%`,\n                        paddingTop: `${SQUARE_WIDTH * .72}%`,\n                        maxWidth: 100,\n                        maxHeight: 100,\n                      }} \n                    />;\n          }\n          return(\n              <button \n                key={`reward${index}`} \n                style={{\n                  width: `${SQUARE_WIDTH}%`,\n                  // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: 'transparent',\n                  border: 'none',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 120,\n                  // maxHeight: 120,\n                  position: 'relative',\n                }} \n                onClick={() => openRewardBuilderPopup(reward)}\n              >\n                <img \n                  style={{\n                    ...MASTER.smallRewardIcon,\n                    width: '70%',\n                    height: '70%',\n                  }} \n                  src={!reward.title && !reward.description && !reward.img ? '../../static/gift_light_gray.png' : '../../static/gift_gray.png'} \n                />\n              </button>\n          )\n        case 'task':\n          if(!taskNum){\n              return;\n          }\n          const task = board.squares[taskNum - 1];\n          if(taskNum === board.numSquares){\n            taskNum = 0;\n          }else {\n            taskNum++;\n          }\n          if(task.freeSquare){\n            return (\n              <button key={`free${index}`} \n                style={{ \n                  width: `${SQUARE_WIDTH}%`,\n                  paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  backgroundColor: `#${board.completeColor}`,\n                  borderWidth: 1,\n                  borderColor: 'black',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 120,\n                  // maxHeight: 120,\n                  position: 'relative',\n                  \n                }}\n                onClick={() => openSquareBuilderPopup(task)}\n              >\n                <img style={MASTER.freeSquareIcon} src={'../../static/circle_check.png'} />\n              </button>\n            )\n          }\n          return (\n            <button \n              key={`task${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                backgroundColor: task.freeSquare ? `#${board.completeColor}` : `#${board.incompleteColor}`,\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                cursor: 'pointer',\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative',\n              }}\n              onClick={() => openSquareBuilderPopup(task)}\n            >\n              <div style={MASTER.squareText}>{task.squareText}</div>\n            </button>\n          );\n        case 'empty':\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative',\n              }} \n            />\n          );\n        default:\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                paddingTop: `${SQUARE_WIDTH * .72}%`,\n                maxWidth: 120,\n                // maxHeight: 120,\n                position: 'relative',\n              }} \n            />\n          );\n      }\n    })\n  }\n\n  const generateBoard = () => {\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return (\n        <div \n          key={`row${index + 1}`} \n          style={{display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'center'}}\n        >\n          {generateRow(row)}\n        </div>\n      ) \n    });\n  }\n\n  if(board){\n    return (\n      <div style={styles.container}>\n        {generateBoard(props.board)}\n        <Dialog open={rewardDialogOpen} onBackdropClick={() => setRewardDialogOpen(false)}>\n          <DialogTitle onClose={() => setRewardDialogOpen(false)}>\n            EDIT REWARD\n          </DialogTitle>\n          <RewardBuilder reward={reward} openPopup={setRewardDialogOpen} />\n        </Dialog>\n        <Dialog open={taskDialogOpen} onBackdropClick={() => setTaskDialogOpen(false)}>\n           <DialogTitle onClose={() => setTaskDialogOpen(false)}>\n            EDIT TASK\n          </DialogTitle>\n          <SquareBuilder task={task} openPopup={setTaskDialogOpen} />\n        </Dialog>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n  \nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff',\n  },\n};\n\nexport default BoardBuilderBoard;"]},"metadata":{},"sourceType":"module"}