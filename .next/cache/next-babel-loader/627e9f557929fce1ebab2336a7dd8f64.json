{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/Play/PlayBoard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../styles/masterStyles'; // Data imports\n\nimport { boardTemplates } from '../../constants/boardSizes';\nimport { checkForRewards } from '../../funcs/boardLogic'; // context imports\n\nimport { PlayContext } from '../../contexts/playContext'; // Component imports\n\nimport TaskDetail from './SquareDetail';\nimport RewardDetail from './RewardDetail'; // Material ui\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const {\n    children,\n    classes,\n    onClose\n  } = props;\n  return __jsx(MuiDialogTitle, {\n    disableTypography: true,\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, children), __jsx(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: onClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(CloseIcon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })));\n});\n\nconst PlayBoard = props => {\n  const {\n    contextGame,\n    saveGame\n  } = useContext(PlayContext);\n  const SQUARE_WIDTH = 90 / (Math.sqrt(contextGame.numSquares) + 1);\n  let taskNum = 1;\n  const {\n    0: board,\n    1: setBoard\n  } = useState(props.board);\n  const {\n    0: rewardDialogOpen,\n    1: setRewardDialogOpen\n  } = useState(false);\n  const {\n    0: reward,\n    1: setReward\n  } = useState({});\n  const {\n    0: taskDialogOpen,\n    1: setTaskDialogOpen\n  } = useState(false);\n  const {\n    0: task,\n    1: setTask\n  } = useState({});\n\n  const openRewardDetailPopup = reward => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  };\n\n  const openTaskDetailPopup = task => {\n    setTaskDialogOpen(true);\n    setTask(task);\n  };\n\n  useEffect(() => {\n    setBoard(contextGame);\n  }, [contextGame]);\n\n  const updateTask = task => {\n    const gameToSave = _objectSpread({}, contextGame, {\n      squares: contextGame.squares.map(square => {\n        if (square._id === task._id) {\n          return task;\n        }\n\n        return square;\n      })\n    }); // run saveGame with the result of checkForRewards\n\n\n    let rewardsChanged = false;\n    const earnedRewards = checkForRewards(gameToSave);\n    console.log({\n      earnedRewards\n    });\n    const rewards = contextGame.rewards.map(reward => {\n      if (earnedRewards.includes(reward.position)) {\n        if (!reward.earned) {\n          console.log('setting reward earned', reward.position);\n          rewardsChanged = true;\n        }\n\n        return _objectSpread({}, reward, {\n          earned: true\n        });\n      }\n\n      return _objectSpread({}, reward, {\n        earned: false\n      });\n    });\n\n    if (rewardsChanged) {\n      console.log('saving reward change');\n\n      const gameWithRewards = _objectSpread({}, gameToSave, {\n        rewards\n      });\n\n      saveGame(gameWithRewards);\n    } else {\n      saveGame(gameToSave);\n    }\n  };\n\n  const generateRow = row => {\n    const SOMETHING_RIGHT = contextGame.rewards.filter(reward => (reward.position.includes('row') || reward.position.includes('diagonalUpRight')) && reward.title)[0];\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = contextGame.rewards.length ? contextGame.rewards.filter(reward => reward.position === square.id && reward.title)[0] : null;\n\n          if (!reward) {\n            return __jsx(\"div\", {\n              key: `empty${index}`,\n              style: {\n                width: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : `${SQUARE_WIDTH}%`,\n                aspectRatio: 1,\n                maxWidth: 150,\n                maxHeight: 150,\n                minWidth: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : 100,\n                minHeight: 100\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            });\n          }\n\n          return __jsx(\"button\", {\n            key: `reward${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              aspectRatio: 1,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              backgroundColor: 'transparent',\n              border: 'none',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 150,\n              maxHeight: 150,\n              minWidth: 100,\n              minHeight: 100\n            },\n            onClick: () => openRewardDetailPopup(reward),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, __jsx(\"img\", {\n            style: _objectSpread({}, MASTER.smallRewardIcon, {\n              width: '70%',\n              height: '70%'\n            }),\n            src: reward.earned ? '../../static/gift_green.png' : '../../static/gift_gray.png',\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }));\n\n        case 'task':\n          if (!taskNum) {\n            return;\n          }\n\n          const task = contextGame.squares[taskNum - 1];\n\n          if (taskNum === contextGame.numSquares) {\n            taskNum = 0;\n          } else {\n            taskNum++;\n          }\n\n          if (task.freeSquare) {\n            return __jsx(\"button\", {\n              key: `free${index}`,\n              style: {\n                width: `${SQUARE_WIDTH}%`,\n                aspectRatio: 1,\n                backgroundColor: `#${contextGame.completeColor}`,\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                maxWidth: 150,\n                maxHeight: 150\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 183\n              },\n              __self: this\n            }, __jsx(\"img\", {\n              style: MASTER.freeSquareIcon,\n              src: '../../static/circle_check.png',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 198\n              },\n              __self: this\n            }));\n          }\n\n          return __jsx(\"button\", {\n            key: `task${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              aspectRatio: 1,\n              backgroundColor: task.complete ? `#${contextGame.completeColor}` : `#${contextGame.incompleteColor}`,\n              borderWidth: 1,\n              borderColor: 'black',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              outline: 'none',\n              cursor: 'pointer',\n              maxWidth: 150,\n              maxHeight: 150\n            },\n            onClick: () => openTaskDetailPopup(task),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, __jsx(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221\n            },\n            __self: this\n          }, task.squareText));\n\n        case 'empty':\n          return __jsx(\"div\", {\n            key: `empty${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              aspectRatio: 1,\n              maxWidth: 150,\n              maxHeight: 150\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          });\n\n        default:\n          return __jsx(\"div\", {\n            key: `empty${index}`,\n            style: {\n              width: `${SQUARE_WIDTH}%`,\n              aspectRatio: 1,\n              maxWidth: 150,\n              maxHeight: 150\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 237\n            },\n            __self: this\n          });\n      }\n    });\n  };\n\n  const generateBoard = () => {\n    console.log('generating rows', contextGame);\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return __jsx(\"div\", {\n        key: `row${index + 1}`,\n        style: {\n          display: 'flex',\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, generateRow(row));\n    });\n  };\n\n  if (props.board) {\n    return __jsx(\"div\", {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, generateBoard(), __jsx(Dialog, {\n      open: rewardDialogOpen,\n      onBackdropClick: () => setRewardDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: () => setRewardDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"REWARD\"), __jsx(RewardDetail, {\n      reward: reward,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    })), __jsx(Dialog, {\n      open: taskDialogOpen,\n      onBackdropClick: () => setTaskDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, __jsx(DialogTitle, {\n      onClose: () => setTaskDialogOpen(false),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"TASK\"), __jsx(TaskDetail, {\n      task: task,\n      updateTask: updateTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })));\n  } else {\n    return null;\n  }\n};\n\nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff'\n  }\n};\nexport default PlayBoard;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/Play/PlayBoard.js"],"names":["React","useState","useEffect","useContext","MASTER","COLORS","boardTemplates","checkForRewards","PlayContext","TaskDetail","RewardDetail","withStyles","Dialog","MuiDialogActions","MuiDialogTitle","Typography","IconButton","CloseIcon","materialStyles","theme","root","margin","padding","spacing","fontSize","color","primary","closeButton","position","right","top","palette","grey","DialogTitle","props","children","classes","onClose","PlayBoard","contextGame","saveGame","SQUARE_WIDTH","Math","sqrt","numSquares","taskNum","board","setBoard","rewardDialogOpen","setRewardDialogOpen","reward","setReward","taskDialogOpen","setTaskDialogOpen","task","setTask","openRewardDetailPopup","openTaskDetailPopup","updateTask","gameToSave","squares","map","square","_id","rewardsChanged","earnedRewards","console","log","rewards","includes","earned","gameWithRewards","generateRow","row","SOMETHING_RIGHT","filter","title","index","type","length","id","width","aspectRatio","maxWidth","maxHeight","minWidth","minHeight","display","alignItems","justifyContent","backgroundColor","border","outline","cursor","smallRewardIcon","height","freeSquare","completeColor","borderWidth","borderColor","freeSquareIcon","complete","incompleteColor","squareText","generateBoard","template","size","spaces","flexDirection","styles","container","flex"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../styles/masterStyles';\n\n// Data imports\nimport { boardTemplates } from '../../constants/boardSizes';\nimport { checkForRewards } from '../../funcs/boardLogic';\n\n// context imports\nimport { PlayContext } from '../../contexts/playContext';\n\n// Component imports\nimport TaskDetail from './SquareDetail';\nimport RewardDetail from './RewardDetail';\n\n// Material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n    </MuiDialogTitle>\n  );\n});\n\nconst PlayBoard = (props) => {\n\n  const { contextGame, saveGame } = useContext(PlayContext);\n\n  const SQUARE_WIDTH = 90 / (Math.sqrt(contextGame.numSquares) + 1);\n\n  let taskNum = 1;\n\n  const [board, setBoard] = useState(props.board);\n  const [rewardDialogOpen, setRewardDialogOpen] = useState(false);\n  const [reward, setReward] = useState({});\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n  const [task, setTask] = useState({});\n  \n  const openRewardDetailPopup = (reward) => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  }\n\n  const openTaskDetailPopup = (task) => {\n    setTaskDialogOpen(true);\n    setTask(task);\n  }\n\n  useEffect(() => {\n    setBoard(contextGame);\n  }, [contextGame])\n\n  const updateTask = task => {\n    const gameToSave = {\n      ...contextGame, \n      squares: contextGame.squares.map((square) => {\n          if(square._id === task._id){\n            return task;\n          }\n          return square;\n        }\n      )\n    };\n    // run saveGame with the result of checkForRewards\n    let rewardsChanged = false;\n    const earnedRewards = checkForRewards(gameToSave);\n    console.log({earnedRewards})\n    const rewards = contextGame.rewards.map(reward => {\n      if(earnedRewards.includes(reward.position)){\n        if(!reward.earned){\n          console.log('setting reward earned', reward.position)\n          \n          rewardsChanged = true;\n        }\n        return {\n          ...reward,\n          earned: true\n        }\n      } \n      return {\n        ...reward,\n        earned: false\n      }\n    });\n    if(rewardsChanged){\n      console.log('saving reward change')\n      const gameWithRewards = { ...gameToSave, rewards };\n      saveGame(gameWithRewards);   \n    } else {\n      saveGame(gameToSave);\n    }\n  }\n\n  const generateRow = row => {\n    const SOMETHING_RIGHT = contextGame.rewards.filter(reward => (reward.position.includes('row') || reward.position.includes('diagonalUpRight')) && reward.title)[0];\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = contextGame.rewards.length ?  contextGame.rewards.filter(reward => reward.position === square.id && reward.title)[0] : null;\n          if(!reward){\n            return <div key={`empty${index}`} \n                      style={{\n                        width: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : `${SQUARE_WIDTH}%`,\n                        aspectRatio: 1,\n                        maxWidth: 150,\n                        maxHeight: 150,\n                        minWidth: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : 100,\n                        minHeight: 100,\n                      }} \n                    />;\n          }\n          return(\n              <button \n                key={`reward${index}`} \n                style={{\n                  width: `${SQUARE_WIDTH}%`,\n                  aspectRatio: 1,\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: 'transparent',\n                  border: 'none',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 150,\n                  maxHeight: 150,\n                  minWidth: 100,\n                  minHeight: 100,\n                }} \n                onClick={() => openRewardDetailPopup(reward)}\n              >\n                <img \n                  style={{\n                    ...MASTER.smallRewardIcon,\n                    width: '70%',\n                    height: '70%',\n                  }} \n                  src={reward.earned ? '../../static/gift_green.png' : '../../static/gift_gray.png'} \n                />\n              </button>\n          )\n        case 'task':\n          if(!taskNum){\n            return;\n          }\n          const task = contextGame.squares[taskNum - 1];\n          if(taskNum === contextGame.numSquares){\n            taskNum = 0;\n          }else {\n            taskNum++;\n          }\n          if(task.freeSquare){\n            return (\n              <button key={`free${index}`} \n                style={{ \n                  width: `${SQUARE_WIDTH}%`,\n                  aspectRatio: 1,\n                  backgroundColor: `#${contextGame.completeColor}`,\n                  borderWidth: 1,\n                  borderColor: 'black',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  outline: 'none',\n                  maxWidth: 150,\n                  maxHeight: 150,\n                }}\n              >\n                <img style={MASTER.freeSquareIcon} src={'../../static/circle_check.png'} />\n              </button>\n            )\n          }\n          return (\n            <button \n              key={`task${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                aspectRatio: 1,\n                backgroundColor: task.complete ? `#${contextGame.completeColor}` : `#${contextGame.incompleteColor}`,\n                borderWidth: 1,\n                borderColor: 'black',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                outline: 'none',\n                cursor: 'pointer',\n                maxWidth: 150,\n                maxHeight: 150,\n              }}\n              onClick={() => openTaskDetailPopup(task)}\n            >\n              <div>{task.squareText}</div>\n            </button>\n          );\n        case 'empty':\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                aspectRatio: 1,\n                maxWidth: 150,\n                maxHeight: 150,\n              }} \n            />\n          );\n        default:\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}%`,\n                aspectRatio: 1,\n                maxWidth: 150,\n                maxHeight: 150,\n              }} \n            />\n          );\n      }\n    })\n  }\n\n  const generateBoard = () => {\n    console.log('generating rows', contextGame)\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return (\n        <div \n          key={`row${index + 1}`} \n          style={{display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'center'}}\n        >\n          {generateRow(row)}\n        </div>\n      ) \n    });\n  }\n\n  if(props.board){\n    return (\n      <div style={styles.container}>\n        {generateBoard()}\n        <Dialog open={rewardDialogOpen} onBackdropClick={() => setRewardDialogOpen(false)}>\n          <DialogTitle onClose={() => setRewardDialogOpen(false)}>\n            REWARD\n          </DialogTitle>\n          <RewardDetail reward={reward} />\n        </Dialog>\n        <Dialog open={taskDialogOpen} onBackdropClick={() => setTaskDialogOpen(false)}>\n           <DialogTitle onClose={() => setTaskDialogOpen(false)}>\n            TASK\n          </DialogTitle>\n          <TaskDetail task={task} updateTask={updateTask} />\n        </Dialog>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n  \nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff',\n  },\n};\n\nexport default PlayBoard;"]},"metadata":{},"sourceType":"module"}