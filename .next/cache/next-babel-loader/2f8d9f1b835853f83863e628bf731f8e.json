{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = props => {\n  const router = useRouter();\n  const {\n    0: contextBoard,\n    1: setContextBoard\n  } = useState({});\n  const {\n    0: stuffToSave,\n    1: setStuffToSave\n  } = useState(false);\n\n  const getBoard = async boardID => {\n    if (boardID && contextBoard._id === boardID) {\n      console.log('go with same board', contextBoard, boardID);\n      return;\n    }\n\n    try {\n      const request = await fetch(`http://localhost:8000/boards/${boardID}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        }\n      });\n      const board = await request.json();\n      setContextBoard(board);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const newBoard = async orgID => {\n    try {\n      const request = await fetch(`http://localhost:8000/boards`, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify({\n          orgID: orgID\n        })\n      });\n      const boardID = await request.json();\n      router.push(`/manageBoards/${boardID}`);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const saveBoard = async () => {\n    console.log('SAVING');\n\n    if (contextBoard.groups.useTeams) {\n      const teamsNoFrontendIDs = contextBoard.groups.teams.map(team => {\n        if (!team._id || team._id.includes('team')) {\n          return {\n            name: team.name,\n            accessCode: team.accessCode\n          };\n        }\n\n        return team;\n      });\n      contextBoard.groups.teams = teamsNoFrontendIDs;\n    }\n\n    try {\n      const request = await fetch(`http://localhost:8000/boards/${contextBoard._id}`, {\n        method: 'PATCH',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify(_objectSpread({}, contextBoard, {\n          modified: new Date()\n        }))\n      });\n      const success = await request.json();\n      console.log({\n        success\n      });\n\n      if (success) {\n        setStuffToSave(false);\n        setContextBoard(success.board);\n      } else {\n        alert('There was a problem saving your board... please try again later!');\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return __jsx(ManageBoardsContext.Provider, {\n    value: {\n      contextBoard,\n      updateBoard: setContextBoard,\n      getBoard,\n      newBoard,\n      setStuffToSave,\n      stuffToSave,\n      saveBoard\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ManageBoardsContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js"],"names":["React","createContext","useState","useEffect","useRouter","ManageBoardsContext","ManageBoardsContextProvider","props","router","contextBoard","setContextBoard","stuffToSave","setStuffToSave","getBoard","boardID","_id","console","log","request","fetch","method","headers","localStorage","getItem","board","json","err","alert","newBoard","orgID","body","push","saveBoard","groups","useTeams","teamsNoFrontendIDs","teams","map","team","includes","name","accessCode","modified","Date","success","updateBoard","children"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,mBAAmB,GAAGJ,aAAa,EAAzC;;AAEP,MAAMK,2BAA2B,GAAIC,KAAD,IAAW;AAC3C,QAAMC,MAAM,GAAGJ,SAAS,EAAxB;AAEA,QAAM;AAAA,OAAEK,YAAF;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAAA,OAAES,WAAF;AAAA,OAAeC;AAAf,MAAkCV,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMW,QAAQ,GAAG,MAAOC,OAAP,IAAmB;AAChC,QAAGA,OAAO,IAAIL,YAAY,CAACM,GAAb,KAAqBD,OAAnC,EAA2C;AACvCE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCR,YAAlC,EAAgDK,OAAhD;AACA;AACH;;AACD,QAAI;AACA,YAAMI,OAAO,GAAG,MAAMC,KAAK,CAAE,gCAA+BL,OAAQ,EAAzC,EAA4C;AACnEM,QAAAA,MAAM,EAAE,KAD2D;AAEnEC,QAAAA,OAAO,EAAE;AACL,oBAAU,kBADL;AAEL,0BAAgB,kBAFX;AAGL,2BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAH1D;AAF0D,OAA5C,CAA3B;AAQI,YAAMC,KAAK,GAAG,MAAMN,OAAO,CAACO,IAAR,EAApB;AACAf,MAAAA,eAAe,CAACc,KAAD,CAAf;AACP,KAXD,CAWE,OAAME,GAAN,EAAW;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW;AAC5B,GAjBD;;AAmBA,QAAME,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAC9B,QAAI;AACA,YAAMX,OAAO,GAAG,MAAMC,KAAK,CAAE,8BAAF,EAAiC;AACxDC,QAAAA,MAAM,EAAE,MADgD;AAExDC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB,kBAFT;AAGP,2BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAHxD,SAF+C;AAOxDO,QAAAA,IAAI,EAAE,gBAAe;AACjBD,UAAAA,KAAK,EAAEA;AADU,SAAf;AAPkD,OAAjC,CAA3B;AAWE,YAAMf,OAAO,GAAG,MAAMI,OAAO,CAACO,IAAR,EAAtB;AACAjB,MAAAA,MAAM,CAACuB,IAAP,CAAa,iBAAgBjB,OAAQ,EAArC;AAEL,KAfD,CAeE,OAAMY,GAAN,EAAW;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW;AAC5B,GAjBD;;AAmBA,QAAMM,SAAS,GAAG,YAAY;AAC1BhB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AACA,QAAGR,YAAY,CAACwB,MAAb,CAAoBC,QAAvB,EAAgC;AAC5B,YAAMC,kBAAkB,GAAG1B,YAAY,CAACwB,MAAb,CAAoBG,KAApB,CAA0BC,GAA1B,CAA8BC,IAAI,IAAI;AAC7D,YAAG,CAACA,IAAI,CAACvB,GAAN,IAAauB,IAAI,CAACvB,GAAL,CAASwB,QAAT,CAAkB,MAAlB,CAAhB,EAA0C;AACtC,iBAAO;AACHC,YAAAA,IAAI,EAAEF,IAAI,CAACE,IADR;AAEHC,YAAAA,UAAU,EAAEH,IAAI,CAACG;AAFd,WAAP;AAIH;;AACD,eAAOH,IAAP;AACH,OAR0B,CAA3B;AASA7B,MAAAA,YAAY,CAACwB,MAAb,CAAoBG,KAApB,GAA4BD,kBAA5B;AACH;;AACD,QAAI;AACA,YAAMjB,OAAO,GAAG,MAAMC,KAAK,CAAE,gCAA+BV,YAAY,CAACM,GAAI,EAAlD,EAAqD;AAC5EK,QAAAA,MAAM,EAAE,OADoE;AAE5EC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB,kBAFT;AAGP,2BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAHxD,SAFmE;AAO5EO,QAAAA,IAAI,EAAE,kCACCrB,YADD;AAEFiC,UAAAA,QAAQ,EAAE,IAAIC,IAAJ;AAFR;AAPsE,OAArD,CAA3B;AAYE,YAAMC,OAAO,GAAG,MAAM1B,OAAO,CAACO,IAAR,EAAtB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAC2B,QAAAA;AAAD,OAAZ;;AACA,UAAGA,OAAH,EAAW;AACThC,QAAAA,cAAc,CAAC,KAAD,CAAd;AACAF,QAAAA,eAAe,CAACkC,OAAO,CAACpB,KAAT,CAAf;AACD,OAHD,MAGO;AACHG,QAAAA,KAAK,CAAC,kEAAD,CAAL;AACH;AAEN,KAtBD,CAsBE,OAAMD,GAAN,EAAW;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW;AAE5B,GAtCD;;AAyCA,SACI,MAAC,mBAAD,CAAqB,QAArB;AACI,IAAA,KAAK,EAAE;AACHjB,MAAAA,YADG;AAEHoC,MAAAA,WAAW,EAAEnC,eAFV;AAGHG,MAAAA,QAHG;AAIHe,MAAAA,QAJG;AAKHhB,MAAAA,cALG;AAMHD,MAAAA,WANG;AAOHqB,MAAAA;AAPG,KADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUKzB,KAAK,CAACuC,QAVX,CADJ;AAcH,CAnGD;;AAqGA,eAAexC,2BAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router'\n\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ contextBoard, setContextBoard ] = useState({});\n    const [ stuffToSave, setStuffToSave ] = useState(false);\n\n    const getBoard = async (boardID) => {\n        if(boardID && contextBoard._id === boardID){\n            console.log('go with same board', contextBoard, boardID)\n            return;\n        }\n        try {\n            const request = await fetch(`http://localhost:8000/boards/${boardID}`, {\n                method: 'GET',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                })\n                const board = await request.json();\n                setContextBoard(board);\n        } catch(err) {alert(err)}\n    }\n\n    const newBoard = async (orgID) => {\n        try {\n            const request = await fetch(`http://localhost:8000/boards`, {\n                method: 'POST',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify({\n                    orgID: orgID\n                })\n              })\n              const boardID = await request.json();\n              router.push(`/manageBoards/${boardID}`);\n\n        } catch(err) {alert(err)}\n    }\n\n    const saveBoard = async () => {\n        console.log('SAVING');\n        if(contextBoard.groups.useTeams){\n            const teamsNoFrontendIDs = contextBoard.groups.teams.map(team => {\n                if(!team._id || team._id.includes('team')){\n                    return {\n                        name: team.name,\n                        accessCode: team.accessCode\n                    }\n                }\n                return team\n            })\n            contextBoard.groups.teams = teamsNoFrontendIDs;\n        }\n        try {\n            const request = await fetch(`http://localhost:8000/boards/${contextBoard._id}`, {\n                method: 'PATCH',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify({\n                    ...contextBoard,\n                    modified: new Date(),\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success){\n                setStuffToSave(false);\n                setContextBoard(success.board);\n              } else {\n                  alert('There was a problem saving your board... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n\n    return (\n        <ManageBoardsContext.Provider \n            value={{ \n                contextBoard, \n                updateBoard: setContextBoard, \n                getBoard, \n                newBoard, \n                setStuffToSave,\n                stuffToSave,\n                saveBoard\n            }}>\n            {props.children}\n        </ManageBoardsContext.Provider>\n    )\n}\n\nexport default ManageBoardsContextProvider;"]},"metadata":{},"sourceType":"module"}