{"ast":null,"code":"var _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/Play/SquareDetail.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../styles/masterStyles'; // Component imports\n\nimport TaskClick from './Tasks/TaskClick';\nimport TaskCode from './Tasks/TaskCode';\nimport TaskText from './Tasks/TaskText';\nimport TaskPicture from './Tasks/TaskPicture';\nimport TaskQRCode from './Tasks/TaskQRCode';\n\nvar SquareDetail = function SquareDetail(props) {\n  var task = props.task;\n  var updateTask = props.updateTask;\n\n  var _useState = useState(task.complete),\n      isComplete = _useState[0],\n      setIsComplete = _useState[1];\n\n  var generateTaskMethod = function generateTaskMethod(task) {\n    if (props.mustBeDoneInOrder && props.previousSquareComplete) {\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"Must do previous square first!!!\");\n    }\n\n    switch (task.task.taskType) {\n      case 'click':\n        return __jsx(TaskClick, {\n          task: task,\n          updateTask: updateTask,\n          completeSquare: setIsComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        });\n\n      case 'code':\n        return __jsx(TaskCode, {\n          task: task,\n          updateTask: updateTask,\n          completeSquare: setIsComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n\n      case 'text':\n        return __jsx(TaskText, {\n          task: task,\n          updateTask: updateTask,\n          completeSquare: setIsComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n\n      case 'picture':\n        return __jsx(TaskPicture, {\n          task: task,\n          updateTask: updateTask,\n          completeSquare: setIsComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n\n      case 'qrCode':\n        return __jsx(TaskQRCode, {\n          task: task,\n          updateTask: updateTask,\n          completeSquare: setIsComplete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      // case 'proximity':\n      //   return <div>proximity</div>;\n\n      default:\n        return __jsx(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }, \"No task defined....\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      fontSize: 24,\n      marginVertical: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, task.squareText), __jsx(\"div\", {\n    style: {\n      fontSize: 16,\n      marginBottom: 15\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, task.description), isComplete && __jsx(\"div\", {\n    style: styles.completedContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: styles.completedText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"COMPLETE\")), generateTaskMethod(task));\n};\n\nvar styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    padding: 30\n  },\n  completedContainer: {\n    position: 'absolute',\n    left: '50%',\n    top: '20%',\n    zIndex: 115\n  },\n  completedText: {\n    color: COLORS.green,\n    position: 'relative',\n    left: '-50%',\n    top: '-50%',\n    fontSize: 45,\n    transform: 'rotateZ(345deg)'\n  }\n};\nexport default SquareDetail;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/Play/SquareDetail.js"],"names":["React","useState","useEffect","MASTER","COLORS","TaskClick","TaskCode","TaskText","TaskPicture","TaskQRCode","SquareDetail","props","task","updateTask","complete","isComplete","setIsComplete","generateTaskMethod","mustBeDoneInOrder","previousSquareComplete","taskType","styles","container","fontSize","marginVertical","squareText","marginBottom","description","completedContainer","completedText","display","flexDirection","backgroundColor","alignItems","padding","position","left","top","zIndex","color","green","transform"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Style imports\nimport { MASTER, COLORS } from '../../styles/masterStyles';\n\n// Component imports\nimport TaskClick from './Tasks/TaskClick';\nimport TaskCode from './Tasks/TaskCode';\nimport TaskText from './Tasks/TaskText';\nimport TaskPicture from './Tasks/TaskPicture';\nimport TaskQRCode from './Tasks/TaskQRCode';\n\nconst SquareDetail = (props) => {\n\n  const task = props.task;\n  const updateTask = props.updateTask;\n\n  const [isComplete, setIsComplete] = useState(task.complete);\n\n  const generateTaskMethod = task => {\n    if(props.mustBeDoneInOrder && props.previousSquareComplete){\n      return <div>Must do previous square first!!!</div>\n    }\n    switch (task.task.taskType) {\n      case 'click':\n        return <TaskClick task={task} updateTask={updateTask} completeSquare={setIsComplete} />;\n      case 'code':\n        return <TaskCode task={task} updateTask={updateTask} completeSquare={setIsComplete} />;\n      case 'text':\n        return <TaskText task={task} updateTask={updateTask} completeSquare={setIsComplete} />;\n      case 'picture':\n        return <TaskPicture task={task} updateTask={updateTask} completeSquare={setIsComplete} />;\n      case 'qrCode':\n        return <TaskQRCode task={task} updateTask={updateTask} completeSquare={setIsComplete} />;\n      // case 'proximity':\n      //   return <div>proximity</div>;\n      default:\n        return <div>No task defined....</div>;\n    }\n  }\n\n  return (\n    <div style={styles.container}>\n      <div style={{ fontSize: 24, marginVertical: 5 }}>{task.squareText}</div>\n      <div style={{ fontSize: 16, marginBottom: 15 }}>{task.description}</div>\n      {isComplete && \n        <div style={styles.completedContainer}>\n            <div style={styles.completedText}>COMPLETE</div>\n          </div>\n      }\n      {generateTaskMethod(task)}\n    </div>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    padding: 30,\n  },\n  completedContainer: { \n    position: 'absolute', \n    left: '50%', \n    top: '20%',\n    zIndex: 115,\n  },\n  completedText: { \n    color: COLORS.green, \n    position: 'relative', \n    left: '-50%', \n    top: '-50%', \n    fontSize: 45, \n    transform: 'rotateZ(345deg)',\n  },\n};\n\nexport default SquareDetail;"]},"metadata":{},"sourceType":"module"}