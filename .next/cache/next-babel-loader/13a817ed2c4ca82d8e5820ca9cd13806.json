{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\n\nconst uuidv4 = require('uuid/v4');\n\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = props => {\n  const router = useRouter();\n  const {\n    0: contextBoard,\n    1: setContextBoard\n  } = useState({});\n  const {\n    0: gamesForBoard,\n    1: setGamesForBoard\n  } = useState([]);\n  const {\n    0: stuffToSave,\n    1: setStuffToSave\n  } = useState(false);\n\n  const newBoard = async orgID => {\n    try {\n      const request = await fetch(`${FULL_URL}/boards`, {\n        method: 'POST',\n        // headers: {\n        //   'Accept': 'application/json',\n        //   'Content-Type': 'application/json',\n        //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        // },\n        body: _JSON$stringify({\n          orgID: orgID\n        })\n      });\n      const boardID = await request.json();\n      console.log({\n        boardID\n      });\n      router.push(`/manageBoards/${boardID}`);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const getBoard = async boardID => {\n    if (boardID && contextBoard.id === boardID) {\n      console.log('go with same board', contextBoard, boardID);\n      return;\n    }\n\n    try {\n      const request = await fetch(`${FULL_URL}/boards/${boardID}`, {\n        method: 'POST' // headers: {\n        //     'Accept': 'application/json',\n        //     'Content-Type': 'application/json',\n        //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        // },\n\n      });\n      const board = await request.json();\n      setContextBoard(board);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const saveBoard = async () => {\n    console.log('SAVING');\n\n    if (contextBoard.useTeams) {\n      const teamsNoFrontendIDs = contextBoard.teams.map(team => {\n        if (!team.id || team.id.includes('team')) {\n          return {\n            name: team.name,\n            accessCode: team.accessCode,\n            id: uuidv4()\n          };\n        }\n\n        return team;\n      });\n      contextBoard.teams = teamsNoFrontendIDs;\n    }\n\n    try {\n      const request = await fetch(`${FULL_URL}/boards/update/${contextBoard.id}`, {\n        method: 'POST',\n        // headers: {\n        //   'Accept': 'application/json',\n        //   'Content-Type': 'application/json',\n        //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        // },\n        body: _JSON$stringify(_objectSpread({}, contextBoard, {\n          modified: new Date()\n        }))\n      });\n      const success = await request.json();\n      console.log({\n        success\n      });\n\n      if (success) {\n        setStuffToSave(false);\n        setContextBoard(success);\n      } else {\n        alert('There was a problem saving your board... please try again later!');\n      }\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const getAllGamesForBoard = async boardID => {\n    try {\n      const request = await fetch(`${FULL_URL}/boards/gamesForBoard/${boardID}`, {\n        method: 'GET' // headers: {\n        //         'Accept': 'application/json',\n        //         'Content-Type': 'application/json',\n        //         'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        //     },\n\n      });\n      const games = await request.json();\n      setGamesForBoard(!games.length ? ['none'] : games);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return __jsx(ManageBoardsContext.Provider, {\n    value: {\n      contextBoard,\n      updateBoard: setContextBoard,\n      getBoard,\n      newBoard,\n      setStuffToSave,\n      stuffToSave,\n      saveBoard,\n      getAllGamesForBoard,\n      gamesForBoard\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ManageBoardsContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/manageBoardsContext.js"],"names":["React","createContext","useState","useEffect","useRouter","fetch","FULL_URL","uuidv4","require","ManageBoardsContext","ManageBoardsContextProvider","props","router","contextBoard","setContextBoard","gamesForBoard","setGamesForBoard","stuffToSave","setStuffToSave","newBoard","orgID","request","method","body","boardID","json","console","log","push","err","alert","getBoard","id","board","saveBoard","useTeams","teamsNoFrontendIDs","teams","map","team","includes","name","accessCode","modified","Date","success","getAllGamesForBoard","games","length","updateBoard","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\nconst uuidv4 = require('uuid/v4');\n\nexport const ManageBoardsContext = createContext();\n\nconst ManageBoardsContextProvider = (props) => {\n    const router = useRouter();\n\n    const [ contextBoard, setContextBoard ] = useState({});\n    const [ gamesForBoard, setGamesForBoard ] = useState([]);\n    const [ stuffToSave, setStuffToSave ] = useState(false);\n\n    const newBoard = async (orgID) => {\n        try {\n            const request = await fetch(`${FULL_URL}/boards`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify({\n                    orgID: orgID\n                })\n              })\n              const boardID = await request.json();\n              console.log({boardID})\n              router.push(`/manageBoards/${boardID}`);\n\n        } catch(err) {alert(err)}\n    }\n\n    const getBoard = async (boardID) => {\n        if(boardID && contextBoard.id === boardID){\n            console.log('go with same board', contextBoard, boardID)\n            return;\n        }\n        try {\n            const request = await fetch(`${FULL_URL}/boards/${boardID}`, {\n                method: 'POST',\n                // headers: {\n                //     'Accept': 'application/json',\n                //     'Content-Type': 'application/json',\n                //     'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                })\n                const board = await request.json();\n                setContextBoard(board);\n        } catch(err) {alert(err)}\n    }\n\n    const saveBoard = async () => {\n        console.log('SAVING');\n        if(contextBoard.useTeams){\n            const teamsNoFrontendIDs = contextBoard.teams.map(team => {\n                if(!team.id || team.id.includes('team')){\n                    return {\n                        name: team.name,\n                        accessCode: team.accessCode,\n                        id: uuidv4()\n                    }\n                }\n                return team\n            })\n            contextBoard.teams = teamsNoFrontendIDs;\n        }\n        try {\n            const request = await fetch(`${FULL_URL}/boards/update/${contextBoard.id}`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify({\n                    ...contextBoard,\n                    modified: new Date(),\n                })\n              })\n              const success = await request.json();\n              console.log({success})\n              if(success){\n                setStuffToSave(false);\n                setContextBoard(success);\n              } else {\n                  alert('There was a problem saving your board... please try again later!')\n              }\n\n        } catch(err) {alert(err)}\n        \n    }\n\n    const getAllGamesForBoard = async boardID => {\n        try {\n            const request = await fetch(`${FULL_URL}/boards/gamesForBoard/${boardID}`, {\n                method: 'GET',\n                // headers: {\n                //         'Accept': 'application/json',\n                //         'Content-Type': 'application/json',\n                //         'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                //     },\n                })\n                const games = await request.json();\n                setGamesForBoard(!games.length ? ['none'] : games);\n        } catch(err) {alert(err)}\n    }\n\n\n    return (\n        <ManageBoardsContext.Provider \n            value={{ \n                contextBoard, \n                updateBoard: setContextBoard, \n                getBoard, \n                newBoard, \n                setStuffToSave,\n                stuffToSave,\n                saveBoard,\n                getAllGamesForBoard,\n                gamesForBoard,\n            }}>\n            {props.children}\n        </ManageBoardsContext.Provider>\n    )\n}\n\nexport default ManageBoardsContextProvider;"]},"metadata":{},"sourceType":"module"}