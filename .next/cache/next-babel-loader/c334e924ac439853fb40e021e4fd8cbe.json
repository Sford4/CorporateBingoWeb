{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/SquareBuilder.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useContext } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../../styles/masterStyles'; // Context imports\n\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext'; // Component Imports\n\nimport BuildQRCodeTask from './BuildSquareComponents/BuildQRCodeTask';\nimport BuildCodeTask from './BuildSquareComponents/BuildCodeTask'; // Material UI\n\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nvar SquareBuilder = function SquareBuilder(props) {\n  var generateTaskMethod = function generateTaskMethod(type) {\n    switch (type) {\n      case 'click':\n        return null;\n\n      case 'code':\n        return __jsx(BuildCodeTask, {\n          task: props.task,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        });\n\n      case 'text':\n        return __jsx(\"div\", {\n          className: \"text-builder\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n\n      case 'picture':\n        return __jsx(\"div\", {\n          className: \"picture-builder\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, __jsx(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        }));\n\n      case 'qrCode':\n        return __jsx(BuildQRCodeTask, {\n          task: task,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        });\n      // case 'proximity':\n      //   return <div>proximity</div>;\n\n      default:\n        return null;\n    }\n  };\n\n  var _useContext = useContext(ManageBoardsContext),\n      contextBoard = _useContext.contextBoard,\n      updateBoard = _useContext.updateBoard,\n      setStuffToSave = _useContext.setStuffToSave;\n\n  var _useState = useState(props.task),\n      task = _useState[0],\n      setTask = _useState[1];\n\n  var _useState2 = useState(task.squareText),\n      squareText = _useState2[0],\n      setSquareText = _useState2[1];\n\n  var _useState3 = useState(task.description),\n      description = _useState3[0],\n      setDescription = _useState3[1];\n\n  var _useState4 = useState(task.task.type),\n      taskType = _useState4[0],\n      setTaskType = _useState4[1];\n\n  var _useState5 = useState(task.freeSquare),\n      isFree = _useState5[0],\n      setIsFree = _useState5[1];\n\n  useEffect(function () {\n    if (!contextBoard._id) {\n      setTask(props.task);\n    } else {\n      setTask(contextBoard.squares.filter(function (task) {\n        return task._id === props.task._id;\n      })[0]);\n    }\n  }, [contextBoard]);\n\n  var updateTask = function updateTask(field, val) {\n    var board = contextBoard;\n    updateBoard(_objectSpread({}, board, {\n      squares: board.squares.map(function (oldTask) {\n        if (oldTask._id === task._id) {\n          if (field === 'task') {\n            return _objectSpread({}, oldTask, {\n              task: {\n                type: val,\n                answer: ''\n              }\n            });\n          }\n\n          return _objectSpread({}, oldTask, _defineProperty({}, field, val));\n        }\n\n        return oldTask;\n      })\n    }));\n    setStuffToSave(true);\n  };\n\n  var done = function done() {\n    // save everything to reduer\n    props.openPopup(false);\n  };\n\n  return __jsx(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, __jsx(Switch, {\n    onChange: function onChange() {\n      return updateTask('freeSquare', !task.freeSquare);\n    },\n    value: task.freeSquare,\n    checked: task.freeSquare,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: _objectSpread({}, styles.inputLabel, {\n      marginLeft: 5\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"This is a free square\")), !task.freeSquare && __jsx(\"div\", {\n    style: styles.taskSettingsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Title (will also appear on the square)\"), __jsx(\"input\", {\n    style: _objectSpread({}, MASTER.wideRoundInput, {\n      marginTop: 2\n    }),\n    value: task.squareText,\n    onChange: function onChange(e) {\n      return updateTask('squareText', e.target.value);\n    },\n    placeholder: 'e.g. Two sales in one hour',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Description\"), __jsx(\"textarea\", {\n    autoFocus: true,\n    style: MASTER.wideRoundTextArea,\n    onChange: function onChange(e) {\n      return updateTask('description', e.target.value);\n    },\n    value: task.description,\n    placeholder: 'e.g. Make two sales in one hour and enter their ids below!',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: _objectSpread({}, styles.inputLabel, {\n      marginRight: 10,\n      marginLeft: 5\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Task to complete:\"), __jsx(Select, {\n    displayEmpty: false,\n    value: task.task.type,\n    onChange: function onChange(e) {\n      return updateTask('task', e.target.value);\n    },\n    inputProps: {\n      name: 'num squares',\n      id: 'num-squares-select'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, __jsx(MenuItem, {\n    value: \"click\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Flip a switch\"), __jsx(MenuItem, {\n    value: \"code\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"Enter a code\"), __jsx(MenuItem, {\n    value: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"Enter some text\"), __jsx(MenuItem, {\n    value: \"picture\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Upload a picture\"), __jsx(MenuItem, {\n    value: \"qrCode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"Scan a QR Code\")), __jsx(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, generateTaskMethod(taskType)), __jsx(\"button\", {\n    style: _objectSpread({}, MASTER.wideRoundBtn, {\n      marginTop: 20\n    }),\n    onClick: function onClick() {\n      return done();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: MASTER.wideRoundBtnText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, \"Done\"))));\n};\n\nvar styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    padding: 30,\n    paddingTop: 0,\n    width: '30vw',\n    minWidth: 300\n  },\n  taskSettingsContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    width: '100%'\n  },\n  completedContainer: {\n    position: 'absolute',\n    left: '50%',\n    top: '20%',\n    zIndex: 115\n  },\n  completedText: {\n    color: COLORS.green,\n    position: 'relative',\n    left: '-50%',\n    top: '-50%',\n    fontSize: 45,\n    transform: 'rotateZ(345deg)'\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17\n  }\n};\nexport default SquareBuilder;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/SquareBuilder.js"],"names":["React","useState","useEffect","useContext","MASTER","COLORS","ManageBoardsContext","BuildQRCodeTask","BuildCodeTask","Switch","Select","MenuItem","SquareBuilder","props","generateTaskMethod","type","task","contextBoard","updateBoard","setStuffToSave","setTask","squareText","setSquareText","description","setDescription","taskType","setTaskType","freeSquare","isFree","setIsFree","_id","squares","filter","updateTask","field","val","board","map","oldTask","answer","done","openPopup","styles","container","inputLabel","marginLeft","taskSettingsContainer","wideRoundInput","marginTop","e","target","value","wideRoundTextArea","marginRight","name","id","wideRoundBtn","wideRoundBtnText","display","flexDirection","backgroundColor","alignItems","padding","paddingTop","width","minWidth","completedContainer","position","left","top","zIndex","completedText","color","green","fontSize","transform","primary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Component Imports\nimport BuildQRCodeTask from './BuildSquareComponents/BuildQRCodeTask';\nimport BuildCodeTask from './BuildSquareComponents/BuildCodeTask';\n\n// Material UI\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst SquareBuilder = (props) => {\n\n    const generateTaskMethod = type => {\n        switch (type) {\n            case 'click':\n                return null;\n            case 'code':\n                return (\n                    <BuildCodeTask task={props.task} />\n                );\n            case 'text':\n                return (\n                    <div className='text-builder'>\n                        \n                    </div>\n                );\n            case 'picture':\n                return (\n                    <div className='picture-builder'>\n                        <span></span>\n                    </div>\n                );\n            case 'qrCode':\n                return (\n                    <BuildQRCodeTask task={task} />\n                );\n            // case 'proximity':\n            //   return <div>proximity</div>;\n            default:\n                return null;\n        }\n    }\n\n  const { contextBoard, updateBoard, setStuffToSave } = useContext(ManageBoardsContext);\n\n  const [task, setTask] = useState(props.task);\n\n  const [squareText, setSquareText] = useState(task.squareText);\n  const [description, setDescription] = useState(task.description);\n  const [taskType, setTaskType] = useState(task.task.type);\n  const [isFree, setIsFree] = useState(task.freeSquare);\n\n  useEffect(() => {\n    if(!contextBoard._id){\n        setTask(props.task);\n    } else {\n        setTask(contextBoard.squares.filter(task => task._id === props.task._id)[0]);\n    }\n  }, [contextBoard])\n\n  const updateTask = (field, val) => {\n    const board = contextBoard;\n    updateBoard({\n        ...board,\n        squares: board.squares.map(oldTask => {\n            if(oldTask._id === task._id){\n                if(field === 'task'){\n                    return {\n                        ...oldTask,\n                        task: {\n                            type: val,\n                            answer: '',\n                        }\n                    }\n                }\n                return {\n                    ...oldTask,\n                    [field]: val\n                }\n            }\n            return oldTask;\n        })\n    });\n    setStuffToSave(true);\n}\n\n  const done = () => {\n    // save everything to reduer\n    props.openPopup(false);\n  }\n\n  return (\n    <div style={styles.container}>\n        <div>\n            <Switch\n                onChange = {() => updateTask('freeSquare', !task.freeSquare)}\n                value = {task.freeSquare}\n                checked={task.freeSquare}\n            />\n            <span style={{ ...styles.inputLabel,  marginLeft: 5}}>This is a free square</span>\n        </div>\n        {!task.freeSquare && \n        (\n            <div style={styles.taskSettingsContainer}>\n                <span style={styles.inputLabel}>Title (will also appear on the square)</span>\n                <input \n                    style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n                    value={task.squareText} \n                    onChange={e => updateTask('squareText', e.target.value)} \n                    placeholder={'e.g. Two sales in one hour'}\n                />\n                <span style={styles.inputLabel}>Description</span>\n                <textarea\n                    autoFocus\n                    style={MASTER.wideRoundTextArea}\n                    onChange={(e) => updateTask('description', e.target.value)}\n                    value={task.description} \n                    placeholder={'e.g. Make two sales in one hour and enter their ids below!'}\n                />\n                <span style={{ ...styles.inputLabel, marginRight: 10, marginLeft: 5}}>Task to complete:</span>\n                <Select\n                    displayEmpty={false}\n                    value={task.task.type}\n                    onChange={(e) => updateTask('task', e.target.value)}\n                    inputProps={{\n                        name: 'num squares',\n                        id: 'num-squares-select',\n                    }}\n                >\n                    <MenuItem value=\"click\">Flip a switch</MenuItem>\n                    <MenuItem value=\"code\">Enter a code</MenuItem>\n                    <MenuItem value=\"text\">Enter some text</MenuItem>\n                    <MenuItem value=\"picture\">Upload a picture</MenuItem>\n                    <MenuItem value=\"qrCode\">Scan a QR Code</MenuItem>\n                </Select>\n                <div style={{ marginTop: 20 }}>\n                    {generateTaskMethod(taskType)}\n                </div>\n                <button \n                    style={{ ...MASTER.wideRoundBtn, marginTop: 20 }} \n                    onClick={() => done()}\n                >\n                    <span style={MASTER.wideRoundBtnText}>Done</span>\n                </button>\n            </div>\n        )}\n    </div>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    padding: 30,\n    paddingTop: 0,\n    width: '30vw',\n    minWidth: 300,\n  },\n  taskSettingsContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    width: '100%',\n  },\n  completedContainer: { \n    position: 'absolute', \n    left: '50%', \n    top: '20%',\n    zIndex: 115,\n  },\n  completedText: { \n    color: COLORS.green, \n    position: 'relative', \n    left: '-50%', \n    top: '-50%', \n    fontSize: 45, \n    transform: 'rotateZ(345deg)',\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17,\n  },\n};\n\nexport default SquareBuilder;"]},"metadata":{},"sourceType":"module"}