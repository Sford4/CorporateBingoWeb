{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/orgContext.js\";\nvar __jsx = React.createElement;\nimport React, { createContext, useState, useEffect } from 'react';\nexport const OrgContext = createContext();\n\nconst OrgContextProvider = props => {\n  const {\n    0: org,\n    1: setOrg\n  } = useState({});\n\n  const getOrg = async orgID => {\n    console.log('in get org', orgID);\n\n    try {\n      const request = await fetch(`http://localhost:8000/orgs/${orgID}`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        }\n      });\n      const org = await request.json();\n      console.log({\n        org\n      });\n      setOrg(org);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  const saveOrg = async orgToSave => {\n    console.log('in save org', orgToSave);\n\n    try {\n      const request = await fetch(`http://localhost:8000/orgs/${orgToSave._id}`, {\n        method: 'PATCH',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n        },\n        body: _JSON$stringify(orgToSave)\n      });\n      const org = await request.json();\n      console.log({\n        org\n      });\n      setOrg(org);\n    } catch (err) {\n      alert(err);\n    }\n  };\n\n  return __jsx(OrgContext.Provider, {\n    value: {\n      contextOrg: org,\n      updateOrg: setOrg,\n      getOrg: getOrg,\n      saveOrg\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default OrgContextProvider;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/contexts/orgContext.js"],"names":["React","createContext","useState","useEffect","OrgContext","OrgContextProvider","props","org","setOrg","getOrg","orgID","console","log","request","fetch","method","headers","localStorage","getItem","json","err","alert","saveOrg","orgToSave","_id","body","contextOrg","updateOrg","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AAEA,OAAO,MAAMC,UAAU,GAAGH,aAAa,EAAhC;;AAEP,MAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClC,QAAM;AAAA,OAAEC,GAAF;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAAC,EAAD,CAAhC;;AAGA,QAAMO,MAAM,GAAG,MAAOC,KAAP,IAAiB;AAC5BC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,KAA1B;;AACA,QAAI;AACA,YAAMG,OAAO,GAAG,MAAMC,KAAK,CAAE,8BAA6BJ,KAAM,EAArC,EAAwC;AAC/DK,QAAAA,MAAM,EAAE,KADuD;AAE/DC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB,kBAFT;AAGP,2BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAHxD;AAFsD,OAAxC,CAA3B;AAQE,YAAMX,GAAG,GAAG,MAAMM,OAAO,CAACM,IAAR,EAAlB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACL,QAAAA;AAAD,OAAZ;AACAC,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAZL,CAYM,OAAMa,GAAN,EAAW;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW;AAChC,GAfD;;AAiBA,QAAME,OAAO,GAAG,MAAOC,SAAP,IAAqB;AACjCZ,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BW,SAA3B;;AACA,QAAI;AACA,YAAMV,OAAO,GAAG,MAAMC,KAAK,CAAE,8BAA6BS,SAAS,CAACC,GAAI,EAA7C,EAAgD;AACvET,QAAAA,MAAM,EAAE,OAD+D;AAEvEC,QAAAA,OAAO,EAAE;AACP,oBAAU,kBADH;AAEP,0BAAgB,kBAFT;AAGP,2BAAkB,UAASC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAoC;AAHxD,SAF8D;AAOvEO,QAAAA,IAAI,EAAE,gBAAeF,SAAf;AAPiE,OAAhD,CAA3B;AASE,YAAMhB,GAAG,GAAG,MAAMM,OAAO,CAACM,IAAR,EAAlB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY;AAACL,QAAAA;AAAD,OAAZ;AACAC,MAAAA,MAAM,CAACD,GAAD,CAAN;AACD,KAbL,CAaM,OAAMa,GAAN,EAAW;AAACC,MAAAA,KAAK,CAACD,GAAD,CAAL;AAAW;AAChC,GAhBD;;AAkBA,SACI,MAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEM,MAAAA,UAAU,EAAEnB,GAAd;AAAmBoB,MAAAA,SAAS,EAAEnB,MAA9B;AAAsCC,MAAAA,MAAM,EAAEA,MAA9C;AAAsDa,MAAAA;AAAtD,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,KAAK,CAACsB,QADX,CADJ;AAKH,CA5CD;;AA8CA,eAAevB,kBAAf","sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const OrgContext = createContext();\n\nconst OrgContextProvider = (props) => {\n    const [ org, setOrg ] = useState({})\n\n\n    const getOrg = async (orgID) => {\n        console.log('in get org', orgID)\n        try {\n            const request = await fetch(`http://localhost:8000/orgs/${orgID}`, {\n                method: 'GET',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n              })\n              const org = await request.json();\n              console.log({org})\n              setOrg(org);\n            } catch(err) {alert(err)}\n    }\n\n    const saveOrg = async (orgToSave) => {\n        console.log('in save org', orgToSave)\n        try {\n            const request = await fetch(`http://localhost:8000/orgs/${orgToSave._id}`, {\n                method: 'PATCH',\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json',\n                  'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                },\n                body: JSON.stringify(orgToSave),\n              })\n              const org = await request.json();\n              console.log({org})\n              setOrg(org);\n            } catch(err) {alert(err)}\n    }\n\n    return (\n        <OrgContext.Provider value={{ contextOrg: org, updateOrg: setOrg, getOrg: getOrg, saveOrg }}>\n            {props.children}\n        </OrgContext.Provider>\n    )\n}\n\nexport default OrgContextProvider;"]},"metadata":{},"sourceType":"module"}