{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/RewardBuilder.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect, useCallback, useContext } from 'react'; // Style imports\n\nimport { MASTER, COLORS } from '../../../styles/masterStyles'; // Context imports\n\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext'; // Component imports\n\nimport { useDropzone } from 'react-dropzone';\n\nvar RewardBuilder = function RewardBuilder(props) {\n  var _useContext = useContext(ManageBoardsContext),\n      contextBoard = _useContext.contextBoard,\n      updateBoard = _useContext.updateBoard,\n      setStuffToSave = _useContext.setStuffToSave;\n\n  var _useState = useState({}),\n      reward = _useState[0],\n      setReward = _useState[1];\n\n  var generateHowToEarn = function generateHowToEarn(position) {\n    if (position === 'wholeBoard') {\n      return 'Complete every task on the board!';\n    } else if (position.substring(0, 3) === 'row') {\n      return \"Complete every task in row \".concat(position.slice(-1), \".\");\n    } else if (position.substring(0, 3) === 'col') {\n      return \"Complete every task in column \".concat(position.slice(-1), \".\");\n    } else if (position === 'diagonalUpRight') {\n      return 'Complete every task in the diagonal from the bottom left square to the top right.';\n    }\n\n    return 'Complete every task in the diagonal from the top left square to the bottom right.';\n  };\n\n  useEffect(function () {\n    if (!contextBoard.id) {\n      setReward(props.reward);\n    } else {\n      setReward(contextBoard.rewards.filter(function (reward) {\n        return reward.id === props.reward.id;\n      })[0]);\n    }\n\n    if (reward.id && !reward.howToEarn) {\n      updateReward('howToEarn', generateHowToEarn(reward.position));\n    }\n  }, [contextBoard]);\n  var onDrop = useCallback(function (acceptedFiles) {\n    var reader = new FileReader();\n\n    reader.onabort = function () {\n      return alert('file reading was aborted');\n    };\n\n    reader.onerror = function () {\n      return alert('file reading has failed');\n    };\n\n    var file = acceptedFiles[0]; // if(!supportedFileTypes.includes(file.type)){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.wrongFileType} />);\n    // } else if (file.size > 10000000){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.picTooBig} />);\n    // } else {\n\n    reader.addEventListener('load', function () {\n      return setImg(reader.result);\n    });\n    reader.readAsDataURL(file); // }\n  }, []);\n\n  var _useDropzone = useDropzone({\n    onDrop: onDrop\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive;\n\n  var updateReward = function updateReward(field, val) {\n    var board = contextBoard;\n    updateBoard(_objectSpread({}, board, {\n      rewards: board.rewards.map(function (oldReward) {\n        if (oldReward.id === reward.id) {\n          return _objectSpread({}, oldReward, _defineProperty({}, field, val));\n        }\n\n        return oldReward;\n      })\n    }));\n    setStuffToSave(true);\n  };\n\n  var remove = function remove(id) {\n    var board = contextBoard;\n    updateBoard(_objectSpread({}, board, {\n      rewards: board.rewards.map(function (oldReward) {\n        if (oldReward.id === id) {\n          return _objectSpread({}, oldReward, {\n            img: '',\n            title: '',\n            howToEarn: '',\n            description: '',\n            item: '',\n            points: 0\n          });\n        }\n\n        return oldReward;\n      })\n    }));\n  };\n\n  var done = function done() {\n    props.openPopup(false);\n  };\n\n  if (!reward.id) {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"LOADING\");\n  }\n\n  return __jsx(\"div\", {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: {\n      height: 200,\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, __jsx(\"div\", _extends({}, getRootProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), console.log({\n    reward: reward\n  }), !!reward.img ? __jsx(\"div\", {\n    style: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    style: styles.pic,\n    src: reward.img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"(Click image to change)\")) : __jsx(\"div\", {\n    style: styles.dropzone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Click or drag here to change image\"), __jsx(\"p\", {\n    style: {\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Put something that'll get the players excited!\")))), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Title\"), __jsx(\"input\", {\n    style: _objectSpread({}, MASTER.wideRoundInput, {\n      marginTop: 2\n    }),\n    value: reward.title || '',\n    onChange: function onChange(e) {\n      updateReward('title', e.target.value);\n      setReward(_objectSpread({}, reward, {\n        title: e.target.value\n      }));\n    },\n    placeholder: 'e.g. $10 gift card!',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Description\"), __jsx(\"textarea\", {\n    autoFocus: true,\n    style: MASTER.wideRoundTextArea,\n    onChange: function onChange(e) {\n      updateReward('description', e.target.value);\n      setReward(_objectSpread({}, reward, {\n        description: e.target.value\n      }));\n    },\n    value: reward.description || '',\n    placeholder: 'e.g. A t shirt!',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, \"Item they'll earn (for their player record)\"), __jsx(\"input\", {\n    style: _objectSpread({}, MASTER.wideRoundInput, {\n      marginTop: 2\n    }),\n    value: reward.item || '',\n    onChange: function onChange(e) {\n      updateReward('item', e.target.value);\n      setReward(_objectSpread({}, reward, {\n        item: e.target.value\n      }));\n    },\n    placeholder: 'e.g. $10 gift card!',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, \"Points they'll earn (for their player record)\"), __jsx(\"input\", {\n    style: _objectSpread({}, MASTER.wideRoundInput, {\n      marginTop: 2\n    }),\n    value: reward.points,\n    onChange: function onChange(e) {\n      updateReward('points', _parseInt(e.target.value));\n      setReward(_objectSpread({}, reward, {\n        points: _parseInt(e.target.value)\n      }));\n    },\n    type: \"number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), __jsx(\"span\", {\n    style: styles.inputLabel,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"How to earn\"), __jsx(\"textarea\", {\n    autoFocus: true,\n    style: MASTER.wideRoundTextArea,\n    onChange: function onChange(e) {\n      updateReward('howToEarn', e.target.value);\n      setReward(_objectSpread({}, reward, {\n        howToEarn: e.target.value\n      }));\n    },\n    value: reward.howToEarn || '',\n    placeholder: 'e.g. Complete all the speed goals',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    style: _objectSpread({}, MASTER.wideRoundBtn, {\n      backgroundColor: 'red',\n      marginTop: 20\n    }),\n    onClick: function onClick() {\n      return remove(reward.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: MASTER.wideRoundBtnText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Remove Reward\")), __jsx(\"button\", {\n    style: _objectSpread({}, MASTER.wideRoundBtn, {\n      marginTop: 20\n    }),\n    onClick: function onClick() {\n      return done();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    style: MASTER.wideRoundBtnText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, \"Done\")));\n};\n\nvar styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 30,\n    minWidth: 250,\n    width: '30vw'\n  },\n  pic: {\n    width: 200,\n    height: 200,\n    cursor: 'pointer'\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17\n  },\n  dropzone: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 200,\n    height: 200,\n    border: '2px dotted black',\n    marginRight: 10,\n    cursor: 'pointer',\n    outline: 'none'\n  }\n};\nexport default RewardBuilder;","map":{"version":3,"sources":["/Users/spencerford/Documents/DEVyall/PersonalProjects/CorporateBingoWeb/components/ManageBoard/BoardBuilder/RewardBuilder.js"],"names":["React","useState","useEffect","useCallback","useContext","MASTER","COLORS","ManageBoardsContext","useDropzone","RewardBuilder","props","contextBoard","updateBoard","setStuffToSave","reward","setReward","generateHowToEarn","position","substring","slice","id","rewards","filter","howToEarn","updateReward","onDrop","acceptedFiles","reader","FileReader","onabort","alert","onerror","file","addEventListener","setImg","result","readAsDataURL","getRootProps","getInputProps","isDragActive","field","val","board","map","oldReward","remove","img","title","description","item","points","done","openPopup","styles","container","height","width","display","justifyContent","alignItems","marginTop","console","log","flexDirection","pic","dropzone","textAlign","inputLabel","wideRoundInput","e","target","value","wideRoundTextArea","wideRoundBtn","backgroundColor","wideRoundBtnText","padding","minWidth","cursor","color","primary","fontSize","border","marginRight","outline"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Component imports\nimport {useDropzone} from 'react-dropzone'\n\nconst RewardBuilder = (props) => {\n\n  const { contextBoard, updateBoard, setStuffToSave } = useContext(ManageBoardsContext);\n\n  const [reward, setReward] = useState({});\n\n  const generateHowToEarn = position => {\n    if(position === 'wholeBoard'){\n      return 'Complete every task on the board!';\n    } else if (position.substring(0, 3) === 'row'){\n      return `Complete every task in row ${position.slice(-1)}.`; \n    } else if (position.substring(0, 3) === 'col'){\n      return `Complete every task in column ${position.slice(-1)}.`;\n    } else if (position === 'diagonalUpRight'){\n      return 'Complete every task in the diagonal from the bottom left square to the top right.'\n    }\n    return 'Complete every task in the diagonal from the top left square to the bottom right.'\n  }\n\n  useEffect(() => {\n    if(!contextBoard.id){\n        setReward(props.reward);\n    } else {\n        setReward(contextBoard.rewards.filter(reward => reward.id === props.reward.id)[0]);\n    }\n    if(reward.id && !reward.howToEarn){\n        updateReward('howToEarn', generateHowToEarn(reward.position));\n    }\n  }, [contextBoard])\n\n  \n\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader();\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    const file = acceptedFiles[0];\n    // if(!supportedFileTypes.includes(file.type)){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.wrongFileType} />);\n    // } else if (file.size > 10000000){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.picTooBig} />);\n    // } else {\n        reader.addEventListener('load', () =>\n            setImg(reader.result)\n        );\n        reader.readAsDataURL(file);\n    // }\n    }, []);\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    const updateReward = (field, val) => {\n        const board = contextBoard;\n        updateBoard({\n            ...board,\n            rewards: board.rewards.map(oldReward => {\n                if(oldReward.id === reward.id){\n                    return {\n                        ...oldReward,\n                        [field]: val\n                    }\n                }\n                return oldReward;\n            })\n        });\n        setStuffToSave(true);\n    }\n\n    const remove = (id) => {\n        const board = contextBoard;\n        updateBoard({\n            ...board,\n            rewards: board.rewards.map(oldReward => {\n                if(oldReward.id === id){\n                    return {\n                        ...oldReward,\n                        img: '',\n                        title: '',\n                        howToEarn: '',\n                        description: '',\n                        item: '',\n                        points: 0,\n                    }\n                }\n                return oldReward;\n            })\n        });\n    }\n\n  const done = () => {\n    props.openPopup(false);\n  }\n\n  if(!reward.id){\n    return <div>LOADING</div>\n  }\n\n  return (\n    <div style={styles.container}>\n      <div style={{ height: 200, width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 10 }}>\n        \n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        {console.log({reward})}\n        {!!reward.img ? \n            <div style={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                <img \n                    style={styles.pic} \n                    src={reward.img} \n                /> \n                <span>(Click image to change)</span>\n            </div>: \n            <div style={styles.dropzone}>\n                <p style={{textAlign: 'center'}}>Click or drag here to change image</p>\n                <p style={{textAlign: 'center'}}>Put something that'll get the players excited!</p>\n            </div>\n        }\n      </div>\n      </div>\n      <span style={styles.inputLabel}>Title</span>\n      <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.title || ''} \n            onChange={e => {\n                updateReward('title', e.target.value);\n                setReward({...reward, title: e.target.value});\n            }} \n            placeholder={'e.g. $10 gift card!'}\n        />\n        <span style={styles.inputLabel}>Description</span>\n        <textarea\n            autoFocus\n            style={MASTER.wideRoundTextArea}\n            onChange={(e) => {\n                updateReward('description', e.target.value);\n                setReward({...reward, description: e.target.value});\n            }}\n            value={reward.description || ''} \n            placeholder={'e.g. A t shirt!'}\n        />\n         <span style={styles.inputLabel}>Item they'll earn (for their player record)</span>\n        <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.item || ''} \n            onChange={e => {\n                updateReward('item', e.target.value);\n                setReward({...reward, item: e.target.value});\n            }} \n            placeholder={'e.g. $10 gift card!'}\n        />\n         <span style={styles.inputLabel}>Points they'll earn (for their player record)</span>\n        <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.points} \n            onChange={e => {\n                updateReward('points', parseInt(e.target.value));\n                setReward({...reward, points: parseInt(e.target.value)});\n            }} \n            type=\"number\"\n        />\n        <span style={styles.inputLabel}>How to earn</span>\n        <textarea\n            autoFocus\n            style={MASTER.wideRoundTextArea}\n            onChange={(e) => {\n                updateReward('howToEarn', e.target.value);\n                setReward({...reward, howToEarn: e.target.value});\n            }}\n            value={reward.howToEarn || ''} \n            placeholder={'e.g. Complete all the speed goals'}\n            \n        />\n        <button \n            style={{ ...MASTER.wideRoundBtn, backgroundColor: 'red', marginTop: 20 }} \n            onClick={() => remove(reward.id)}\n        >\n            <span style={MASTER.wideRoundBtnText}>Remove Reward</span>\n        </button>\n        <button \n            style={{ ...MASTER.wideRoundBtn, marginTop: 20 }} \n            onClick={() => done()}\n        >\n            <span style={MASTER.wideRoundBtnText}>Done</span>\n        </button>\n    </div>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 30,\n    minWidth: 250,\n    width: '30vw',\n  },\n  pic: {\n    width: 200,\n    height: 200,\n    cursor: 'pointer',\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17,\n    },\n    dropzone: {\n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 200,\n        height: 200,\n        border: '2px dotted black',\n        marginRight: 10,\n        cursor: 'pointer',\n        outline: 'none',\n    }\n\n};\n\nexport default RewardBuilder;"]},"metadata":{},"sourceType":"module"}