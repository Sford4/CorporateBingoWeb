{"version":3,"file":"static/webpack/static/development/pages/manageBoards/[boardID].js.d0f1a670b15cdb05625f.hot-update.js","sources":["webpack:///./components/ManageBoard/BoardBuilder/SquareBuilder.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Component Imports\nimport BuildQRCodeTask from './BuildSquareComponents/BuildQRCodeTask';\nimport BuildCodeTask from './BuildSquareComponents/BuildCodeTask';\nimport TaskHints from './BuildSquareComponents/TaskHints';\n\n// Material UI\nimport Switch from '@material-ui/core/Switch';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\nconst SquareBuilder = (props) => {\n\n    const generateTaskMethod = taskType => {\n        switch (taskType) {\n            case 'click':\n                return null;\n            case 'code':\n                return (\n                    <BuildCodeTask task={props.task} updateTask={updateTask} />\n                );\n            case 'text':\n                return (\n                    <div className='text-builder'>\n                        \n                    </div>\n                );\n            case 'picture':\n                return (\n                    <div className='picture-builder'>\n                        <span></span>\n                    </div>\n                );\n            case 'qrCode':\n                return (\n                    <BuildQRCodeTask task={task} />\n                );\n            // case 'proximity':\n            //   return <div>proximity</div>;\n            default:\n                return null;\n        }\n    }\n\n  const { contextBoard, updateBoard, setStuffToSave } = useContext(ManageBoardsContext);\n\n  const [task, setTask] = useState(props.task);\n\n  useEffect(() => {\n    if(!contextBoard.id){\n        setTask(props.task);\n    } else {\n        setTask(contextBoard.squares.filter(task => task.id === props.task.id)[0]);\n    }\n  }, [contextBoard])\n\n  const updateTask = (field, val) => {\n    const board = contextBoard;\n    updateBoard({\n        ...board,\n        squares: board.squares.map(oldTask => {\n            if(oldTask.id === props.task.id){\n                if(field === 'task'){\n                    return {\n                        ...oldTask,\n                        task: {\n                            taskType: val,\n                            answer: '',\n                        }\n                    }\n                }\n                if(field === 'codes'){\n                    return {\n                        ...oldTask,\n                        codes: { \n                            codeList: val.codeList,\n                            useOnce: val.useOnce,\n                         }\n                    }\n                }\n                if(field === 'freeSquare'){\n                    // if a square is a free square, we set it to complete: true, if not, complete false\n                        return {\n                            ...oldTask,\n                            freeSquare: val,\n                            complete: val,\n                        }\n                }\n                return {\n                    ...oldTask,\n                    [field]: val\n                }\n            }\n            return oldTask;\n        })\n    });\n    setStuffToSave(true);\n}\n\n  const done = () => {\n    props.openPopup(false);\n  }\n\n  return (\n    <div style={styles.container}>\n        <div>\n            <Switch\n                onChange = {() => updateTask('freeSquare', !task.freeSquare)}\n                value = {task.freeSquare}\n                checked={task.freeSquare}\n            />\n            <span style={{ ...styles.inputLabel,  marginLeft: 5}}>This is a free square</span>\n        </div>\n        {!task.freeSquare && \n        (\n            <div style={styles.taskSettingsContainer}>\n                <span style={styles.inputLabel}>Title (will also appear on the square)</span>\n                <input \n                    style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n                    value={task.squareText || ''} \n                    onChange={e => {\n                        updateTask('squareText', e.target.value);\n                        setTask({...task, squareText: e.target.value});\n                    }} \n                    placeholder={'e.g. Two sales in one hour'}\n                    maxLength=\"90\"\n                />\n                <span style={styles.inputLabel}>Description</span>\n                <textarea\n                    autoFocus\n                    style={MASTER.wideRoundTextArea}\n                    onChange={(e) => {\n                        updateTask('description', e.target.value);\n                        setTask({...task, description: e.target.value});\n                    }}\n                    value={task.description || ''} \n                    placeholder={'e.g. Make two sales in one hour and enter their ids below!'}\n                />\n                <span style={{ ...styles.inputLabel, marginRight: 10, marginLeft: 5}}>Hints:</span>\n                <TaskHints updateTask={updateTask} hints={task.hints} />\n                <span style={{ ...styles.inputLabel, marginRight: 10, marginLeft: 5}}>Task to complete:</span>\n                <Select\n                    displayEmpty={false}\n                    value={task.task.taskType}\n                    onChange={(e) => updateTask('task', e.target.value)}\n                    inputProps={{\n                        name: 'num squares',\n                        id: 'num-squares-select',\n                    }}\n                >\n                    <MenuItem value=\"click\">Flip a switch</MenuItem>\n                    <MenuItem value=\"code\">Enter a code</MenuItem>\n                    <MenuItem value=\"text\">Enter some text</MenuItem>\n                    <MenuItem value=\"picture\">Upload a picture</MenuItem>\n                    <MenuItem value=\"qrCode\">Scan a QR Code</MenuItem>\n                </Select>\n                <div style={{ marginTop: 20 }}>\n                    {generateTaskMethod(task.task.taskType)}\n                </div>\n                <button \n                    style={{ ...MASTER.wideRoundBtn, marginTop: 20 }} \n                    onClick={() => done()}\n                >\n                    <span style={MASTER.wideRoundBtnText}>Done</span>\n                </button>\n            </div>\n        )}\n    </div>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    padding: 30,\n    paddingTop: 0,\n    width: '30vw',\n    minWidth: 300,\n  },\n  taskSettingsContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    width: '100%',\n  },\n  completedContainer: { \n    position: 'absolute', \n    left: '50%', \n    top: '20%',\n    zIndex: 115,\n  },\n  completedText: { \n    color: COLORS.green, \n    position: 'relative', \n    left: '-50%', \n    top: '-50%', \n    fontSize: 45, \n    transform: 'rotateZ(345deg)',\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17,\n  },\n};\n\nexport default SquareBuilder;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AA1BA;AA4BA;AACA;AAhCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAoCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AApCA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAhCA;AAuCA;;;;A","sourceRoot":""}