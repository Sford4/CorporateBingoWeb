{"version":3,"file":"static/webpack/static/development/pages/manageBoards/[boardID].js.e90d8f251ad4c0cdc414.hot-update.js","sources":["webpack:///./components/ManageBoard/BoardBuilder/RewardBuilder.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../../styles/masterStyles';\n\n// Context imports\nimport { ManageBoardsContext } from '../../../contexts/manageBoardsContext';\n\n// Component imports\nimport {useDropzone} from 'react-dropzone'\n\nconst RewardBuilder = (props) => {\n\n  const { contextBoard, updateBoard, setStuffToSave } = useContext(ManageBoardsContext);\n\n  const [reward, setReward] = useState({});\n\n  const generateHowToEarn = position => {\n    if(position === 'wholeBoard'){\n      return 'Complete every task on the board!';\n    } else if (position.substring(0, 3) === 'row'){\n      return `Complete every task in row ${position.slice(-1)}.`; \n    } else if (position.substring(0, 3) === 'col'){\n      return `Complete every task in column ${position.slice(-1)}.`;\n    } else if (position === 'diagonalUpRight'){\n      return 'Complete every task in the diagonal from the bottom left square to the top right.'\n    }\n    return 'Complete every task in the diagonal from the top left square to the bottom right.'\n  }\n\n  useEffect(() => {\n    if(!contextBoard.id){\n        setReward(props.reward);\n    } else {\n        setReward(contextBoard.rewards.filter(reward => reward.id === props.reward.id)[0]);\n    }\n    if(reward.id && !reward.howToEarn){\n        updateReward('howToEarn', generateHowToEarn(reward.position));\n    }\n  }, [contextBoard])\n\n  \n\n  const onDrop = useCallback(acceptedFiles => {\n    const reader = new FileReader();\n    reader.onabort = () => alert('file reading was aborted')\n    reader.onerror = () => alert('file reading has failed')\n    const file = acceptedFiles[0];\n    // if(!supportedFileTypes.includes(file.type)){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.wrongFileType} />);\n    // } else if (file.size > 10000000){\n    //     this.openSnackBar(<FormattedMessage {...UserMessages.picTooBig} />);\n    // } else {\n        reader.addEventListener('load', () =>\n            setImg(reader.result)\n        );\n        reader.readAsDataURL(file);\n    // }\n    }, []);\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    const updateReward = (field, val) => {\n        const board = contextBoard;\n        updateBoard({\n            ...board,\n            rewards: board.rewards.map(oldReward => {\n                if(oldReward.id === reward.id){\n                    return {\n                        ...oldReward,\n                        [field]: val\n                    }\n                }\n                return oldReward;\n            })\n        });\n        setStuffToSave(true);\n    }\n\n    const remove = (id) => {\n        const board = contextBoard;\n        updateBoard({\n            ...board,\n            rewards: board.rewards.map(oldReward => {\n                if(oldReward.id === id){\n                    return {\n                        ...oldReward,\n                        img: '',\n                        title: '',\n                        howToEarn: '',\n                        description: '',\n                    }\n                }\n                return oldReward;\n            })\n        });\n    }\n\n  const done = () => {\n    props.openPopup(false);\n  }\n\n  if(!reward.id){\n    return <div>LOADING</div>\n  }\n\n  return (\n    <div style={styles.container}>\n      <div style={{ height: 200, width: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center', marginTop: 10 }}>\n        \n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        {console.log({reward})}\n        {!!reward.img ? \n            <div style={{ width: '100%', display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n                <img \n                    style={styles.pic} \n                    src={reward.img} \n                /> \n                <span>(Click image to change)</span>\n            </div>: \n            <div style={styles.dropzone}>\n                <p style={{textAlign: 'center'}}>Click or drag here to change image</p>\n                <p style={{textAlign: 'center'}}>Put something that'll get the players excited!</p>\n            </div>\n        }\n      </div>\n      </div>\n      <span style={styles.inputLabel}>Title</span>\n      <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.title || ''} \n            onChange={e => {\n                updateReward('title', e.target.value);\n                setReward({...reward, title: e.target.value});\n            }} \n            placeholder={'e.g. $10 gift card!'}\n        />\n        <span style={styles.inputLabel}>Description</span>\n        <textarea\n            autoFocus\n            style={MASTER.wideRoundTextArea}\n            onChange={(e) => {\n                updateReward('description', e.target.value);\n                setReward({...reward, description: e.target.value});\n            }}\n            value={reward.description || ''} \n            placeholder={'e.g. A t shirt!'}\n        />\n         <span style={styles.inputLabel}>Item they'll earn (for their player record)</span>\n        <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.item || ''} \n            onChange={e => {\n                updateReward('item', e.target.value);\n                setReward({...reward, item: e.target.value});\n            }} \n            placeholder={'e.g. $10 gift card!'}\n        />\n         <span style={styles.inputLabel}>Points they'll earn (for their player record)</span>\n        <input \n            style={{ ...MASTER.wideRoundInput, marginTop: 2 }} \n            value={reward.points || 0} \n            onChange={e => {\n                updateReward('points', e.target.value);\n                setReward({...reward, points: e.target.value});\n            }} \n            type=\"number\"\n        />\n        <span style={styles.inputLabel}>How to earn</span>\n        <textarea\n            autoFocus\n            style={MASTER.wideRoundTextArea}\n            onChange={(e) => {\n                updateReward('howToEarn', e.target.value);\n                setReward({...reward, howToEarn: e.target.value});\n            }}\n            value={reward.howToEarn} \n            placeholder={'e.g. Complete all the speed goals'}\n            \n        />\n        <button \n            style={{ ...MASTER.wideRoundBtn, backgroundColor: 'red', marginTop: 20 }} \n            onClick={() => remove(reward.id)}\n        >\n            <span style={MASTER.wideRoundBtnText}>Remove Reward</span>\n        </button>\n        <button \n            style={{ ...MASTER.wideRoundBtn, marginTop: 20 }} \n            onClick={() => done()}\n        >\n            <span style={MASTER.wideRoundBtnText}>Done</span>\n        </button>\n    </div>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n    padding: 30,\n    minWidth: 250,\n    width: '30vw',\n  },\n  pic: {\n    width: 200,\n    height: 200,\n    cursor: 'pointer',\n  },\n  inputLabel: {\n    marginTop: 15,\n    color: COLORS.primary,\n    fontSize: 17,\n    },\n    dropzone: {\n        display: 'flex', \n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 200,\n        height: 200,\n        border: '2px dotted black',\n        marginRight: 10,\n        cursor: 'pointer',\n        outline: 'none',\n    }\n\n};\n\nexport default RewardBuilder;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAhDA;AAgDA;AAAA;AAhDA;AAAA;AAAA;AACA;AAiDA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAVA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAbA;AAerBA;AAoCA;;;;A","sourceRoot":""}