{"version":3,"file":"static/webpack/static/development/pages/usersAndOrg.js.6edaf82627992e650c53.hot-update.js","sources":["webpack:///./components/orgAndUsers/orgDetails.js"],"sourcesContent":["import { useState, useEffect, useCallback, useContext } from 'react';\n\n// Context imports\nimport { OrgContext } from '../../contexts/orgContext';\n\n// Style imports\nimport { MASTER, COLORS } from '../../styles/masterStyles';\n\n// Component Imports\nimport { ChromePicker } from 'react-color';\nimport {useDropzone} from 'react-dropzone';\n\n// Material UI\n\nconst OrgDetails = (props) => {\n\n    const { contextOrg, updateOrg, setStuffToSave } = useContext(OrgContext);\n\n    const [org, setOrg] = useState(contextOrg);\n\n    useEffect(() => {\n        if(!contextOrg.id){\n            setOrg(props.org);\n        } else {\n            setOrg(contextOrg);\n        }\n    }, [contextOrg])\n\n    const changeRegularValues = (name, val) => {\n        updateOrg({\n            ...org,\n            [name]: val\n        })\n        setStuffToSave(true);\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        const reader = new FileReader();\n        reader.onabort = () => alert('file reading was aborted')\n        reader.onerror = () => alert('file reading has failed')\n        const file = acceptedFiles[0];\n        // if(!supportedFileTypes.includes(file.type)){\n        //     this.openSnackBar(<FormattedMessage {...UserMessages.wrongFileType} />);\n        // } else if (file.size > 10000000){\n        //     this.openSnackBar(<FormattedMessage {...UserMessages.picTooBig} />);\n        // } else {\n            reader.addEventListener('load', () =>\n                changeRegularValues('freeSquareIcon', reader.result)\n            );\n            reader.readAsDataURL(file);\n        // }\n    }, []);\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n\n    if(!org.id){\n        return <div>LOADING</div>\n    }\n\n    return (\n        <div style={styles.container}>\n            <div style={styles.subcontainer}>\n                <div style={styles.row}>\n                    <div style={{ ...styles.labelColumn, width: '100%',}}>\n                        <span style={styles.inputLabel}>Org Name</span>\n                        <input \n                            style={{ ...MASTER.wideRoundInput, marginTop: 5, width: 'auto', padding: '0 20px 0 20px', maxWidth: 700 }} \n                            value={org.orgName} \n                            onChange={e => {\n                                changeRegularValues('orgName', e.target.value);\n                                setOrg({...org, orgName: e.target.value });\n                            }} \n                            placeholder={'e.g. Example Co'}\n                        />\n                    </div>\n                </div>\n                <div style={{ ...styles.row, justifyContent: 'flex-start' }}>\n                    <span style={styles.inputLabel}>Default Square Colors</span>\n                </div>\n                <div style={styles.row}>\n                    <div style={{ ...styles.labelColumn, alignItems: 'center', flexDirection: 'row' }}>\n                        <ChromePicker color={org.incompleteColor} onChange={(color, e) => changeRegularValues('incompleteColor', color.hex.substring(1, color.hex.length))} />\n                        <span className='incomplete-color' style={{ ...styles.exampleSquare, color: 'white', backgroundColor: `#${org.incompleteColor}`, textAlign: 'center'}}>Incomplete Square Example</span>\n                    </div>\n                    <div style={{ ...styles.labelColumn, alignItems: 'center', flexDirection: 'row' }}>\n                        <ChromePicker color={org.completeColor} onChange={(color, e) => changeRegularValues('completeColor', color.hex.substring(1, color.hex.length))} />\n                        <span className='complete-color' style={{ ...styles.exampleSquare, color: 'white', backgroundColor: `#${org.completeColor}`, textAlign: 'center'}}>Complete Square Example</span>\n                    </div>\n                </div>\n                <div style={{ ...styles.row, justifyContent: 'flex-start' }}>\n                    <span style={{ ...styles.inputLabel, marginTop: 20 }}>Default \"Free Square\" Image</span>\n                </div>\n                <div style={{ ...styles.row, alignItems: 'center', marginTop: 0 }}>\n                    <div style={{ display: 'flex', width: '50%' }}>\n                        <div {...getRootProps()}>\n                            <input {...getInputProps()} />\n                            {\n                            isDragActive ?\n                                <div style={styles.dropzone}>\n                                    <p style={{textAlign: 'center'}}>Click or drag to upload an image</p>\n                                    <p style={{textAlign: 'center'}}>Images must be square, and images with a transparent background work best.</p>\n                                </div> : \n                                <div style={styles.dropzone}>\n                                    <p style={{textAlign: 'center'}}>Click or drag here to change image</p>\n                                    <p style={{textAlign: 'center'}}>Images must be square, and images with a transparent background work best.</p>\n                                </div>\n                            }\n                        </div>\n                        <div style={{ ...styles.exampleSquare, backgroundColor: `#${org.completeColor}`}}>\n                            <img style={styles.image} src={org.freeSquareIcon === 'default' ? '../../static/circle_check.png'  : org.freeSquareIcon}  />\n                        </div>\n                    </div>\n                    <div style={{ ...styles.labelColumn, alignItems: 'center', flexDirection: 'row' }}>\n                        <ChromePicker color={org.primaryColor} onChange={(color, e) => changeRegularValues('primaryColor', color.hex.substring(1, color.hex.length))} />\n                        <span className='complete-color' style={{ ...styles.exampleSquare, color: 'white', backgroundColor: `#${org.primaryColor}`}}>Branding Primary Color</span>\n                    </div>\n                </div>    \n            </div>\n        </div>\n    )\n  };\n\n  const styles = {\n      container: {\n          width: '100%',\n          height: '100%',\n          maxHeight: 700,\n          overflowY: 'scroll',\n          overflowX: 'overlay',\n          paddingBottom: 10,\n          padding: '3% 5%',\n      },\n      subcontainer: {\n      },\n      row: {\n          display: 'flex',\n        //   flexWrap: 'wrap',\n          justifyContent: 'space-around',\n          width: '100%',\n          marginTop: 15\n      },\n      labelColumn: {\n          width: '50%',\n          minWidth: 300,\n          display: 'flex',\n          flexDirection: 'column',\n      },\n      inputLabel: {\n          marginLeft: 15,\n          color: COLORS.primary,\n          fontSize: 17,\n      },\n      exampleSquare: {\n          width: 200,\n          height: 200,\n          minWidth: 200,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          border: '1px solid black',\n          marginRight: 10\n      },\n      image: {\n          width: '80%',\n          height: '80%',\n      },\n      dropzone: {\n          display: 'flex', \n          flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 200,\n        height: 200,\n        border: '2px dotted black',\n        marginRight: 10,\n        cursor: 'pointer',\n        outline: 'none',\n    }\n  }\n  \n  export default OrgDetails;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAtCA;AAsCA;AAAA;AAtCA;AAAA;AAAA;AACA;AAwsourceRoot":""}