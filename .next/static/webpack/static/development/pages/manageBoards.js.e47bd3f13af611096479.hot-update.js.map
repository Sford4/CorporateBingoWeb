{"version":3,"file":"static/webpack/static/development/pages/manageBoards.js.e47bd3f13af611096479.hot-update.js","sources":["webpack:///./pages/manageBoards/index.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useRouter } from 'next/router';\nimport moment from 'moment';\n\n// context imports\n\n// Style imports\nimport { MASTER, COLORS } from '../../styles/masterStyles';\n\n// component imports\nimport Link from 'next/link';\nimport Layout from '../../components/Layout';\n\n// Material UI\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\n\n// context imports\nimport { OrgContext } from '../../contexts/orgContext';\nimport { ManageBoardsContext } from '../../contexts/manageBoardsContext';\nimport { UserContext } from '../../contexts/userContext';\nimport { SUPPORTS_PERFORMANCE_USER_TIMING } from '../../node_modules/next/dist/next-server/lib/utils';\n\nconst ManageBoardsHome = (props) => {\n\n    const headCells = [\n        { id: 'name', numeric: false, disablePadding: true, label: 'NAME' },\n        { id: 'tasks', numeric: true, disablePadding: false, label: 'TASKS' },\n        { id: 'created', numeric: false, disablePadding: false, label: 'CREATED' },\n        { id: 'modified', numeric: true, disablePadding: false, label: 'LAST MODIFIED' },\n      ];\n\n    const router = useRouter();\n\n    const { contextOrg, getOrg } = useContext(OrgContext);\n    const { newBoard } = useContext(ManageBoardsContext);\n    const { user, storeUser, logout } = useContext(UserContext);\n    const [boards, setBoards] = useState(contextOrg.boards || []);\n\n    // table state\n    const [order, setOrder] = React.useState('asc');\n    const [orderBy, setOrderBy] = React.useState('name');\n    const [rows, setRows] = useState(boards);\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  const [searchText, setSearchText] = useState('');\n  \n\n  const searchForBoard = () => {\n    setSearchText('');\n    setBoards(dummyBoards)\n  }\n\n  useEffect(() => {\n    if(!user){\n        if(localStorage.getItem('bingo_user')){\n            storeUser(JSON.parse(localStorage.getItem('bingo_user')));\n        } else {\n            logout();\n        }\n    }\n    if(!contextOrg.id && user && !user.org){\n        router.push('/joinGame');\n    }else if(!contextOrg.id && user && user.org){\n        getOrg(user.org);\n    }\n    if(contextOrg && contextOrg.boards && contextOrg.boards.length !== boards.length){\n        setBoards(contextOrg.boards);\n    }\n  }, [contextOrg, user]);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  function desc(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n      return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n      return 1;\n    }\n    return 0;\n  }\n  \n  function stableSort(array, cmp) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n      const order = cmp(a[0], b[0]);\n      if (order !== 0) return order;\n      return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n  }\n  \n  function getSorting(order, orderBy) {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n  }\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const generateBoardRows = () => {\n\t\tif(rows.length){\n            return rows\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            .map((board, index) => {\n\t\t\t\treturn (\n                    <Link key={board.id} href={`manageBoards/[boardID]`} as={`manageBoards/${board.id}`}>\n                        <TableRow style={{ cursor: 'pointer' }}>\n                            <TableCell>{board.title}</TableCell>\n                            <TableCell>{board.numSquares}</TableCell>\n                            <TableCell>{moment(board.created).format(\"MMM Do, YYYY\")}</TableCell>\n                            <TableCell>{moment(board.modified).format(\"MMM Do, YYYY\")}</TableCell>\n                        </TableRow>\n                    </Link>\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\t\treturn <TableRow style={{width: '100%'}}><TableCell>No boards yet... click NEW BOARD to make one!</TableCell><TableCell></TableCell><TableCell></TableCell><TableCell></TableCell></TableRow>\n  }\n\n  return (\n      <Layout>\n        <div style={styles.container}>\n            <div style={MASTER.pageTitle}>MANAGE BOARDS</div>\n            <Paper>\n                <div style={{ padding: '1% 3%' }}>\n                    <div style={{ display: 'flex' }}>\n                        <input \n                            style={{ ...MASTER.wideRoundInput, maxWidth: 300 }} \n                            value={searchText} \n                            onChange={(e) => setSearchText(e.target.value)} \n                            placeholder={'Search by name or access code '}\n                        />\n                        <button \n                            style={{ ...MASTER.wideRoundBtn, width: 100 }} \n                            onClick={() => searchForBoard()}\n                        >\n                            <div style={MASTER.wideRoundBtnText}>SEARCH</div>\n                        </button>\n                    </div>\n                    <Table style={{ width:\"100%\" }}>\n                        <TableHead>\n                            <TableRow>\n                                {headCells.map(headCell => (\n                                    <TableCell\n                                        key={headCell.id}\n                                        align={headCell.numeric ? 'right' : 'left'}\n                                        padding={headCell.disablePadding ? 'none' : 'default'}\n                                        sortDirection={orderBy === headCell.id ? order : false}\n                                    >\n                                        <TableSortLabel\n                                            active={orderBy === headCell.id}\n                                            direction={orderBy === headCell.id ? order : 'asc'}\n                                            onClick={(e) => handleRequestSort(e, headCell.id)}\n                                        >\n                                        {headCell.label}\n                                        {orderBy === headCell.id ? (\n                                            <span>\n                                            {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                            </span>\n                                        ) : null}\n                                        </TableSortLabel>\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {generateBoardRows()}\n                        </TableBody>\n                    </Table>\n                    <TablePagination\n                        rowsPerPageOptions={[5, 10, 20, 40, 60]}\n                        component=\"div\"\n                        count={rows.length}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={handleChangePage}\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\n                    />\n                </div>\n            </Paper>\n            <button \n                style={{ ...MASTER.wideRoundBtn, width: 150, position: 'absolute', bottom: 30, right: 20, height: 45 }} \n                onClick={() => newBoard(contextOrg.id)}\n            >\n                <div style={MASTER.wideRoundBtnText}>NEW BOARD</div>\n            </button>\n        </div>\n    </Layout>\n  );\n}\n  \nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: '#fff',\n  },\n};\n\nexport default ManageBoardsHome;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAydA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;;;;A","sourceRoot":""}