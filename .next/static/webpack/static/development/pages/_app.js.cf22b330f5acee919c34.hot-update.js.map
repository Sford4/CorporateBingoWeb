{"version":3,"file":"static/webpack/static/development/pages/_app.js.cf22b330f5acee919c34.hot-update.js","sources":["webpack:///./contexts/orgContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport FULL_URL from '../constants/constants';\n\nexport const OrgContext = createContext();\n\nconst OrgContextProvider = (props) => {\n    const [ org, setOrg ] = useState({});\n    const [users, setUsers] = useState([]);\n    const [boards, setBoards] = useState([]);\n    const [ stuffToSave, setStuffToSave ] = useState(false);\n\n\n    const getOrg = async (orgID) => {\n        console.log('in get org', orgID)\n        try {\n            const request = await fetch(`${FULL_URL}/orgs/${orgID}`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n              })\n              const org = await request.json();\n              console.log('GOT ORG', org)\n              setUsers(org.userList);\n              setBoards(org.boards);\n              setOrg(org);\n            } catch(err) {alert(err)}\n    }\n\n    const saveOrg = async (orgToSave) => {\n        console.log('in save org', orgToSave)\n        try {\n            const request = await fetch(`${FULL_URL}/orgs/update/${orgToSave.id}`, {\n                method: 'POST',\n                // headers: {\n                //   'Accept': 'application/json',\n                //   'Content-Type': 'application/json',\n                //   'Authorization': `Bearer ${localStorage.getItem('bingo_token')}`\n                // },\n                body: JSON.stringify(orgToSave),\n              })\n              const org = await request.json();\n              setOrg(org);\n              setStuffToSave(false);\n            } catch(err) {alert(err)}\n    }\n\n    return (\n        <OrgContext.Provider value={{ \n            contextOrg: org, \n            contextOrgUsers: users,\n            contextOrgBoards: boards,\n            updateOrg: setOrg, \n            getOrg: getOrg, \n            saveOrg, \n            setStuffToSave,\n            stuffToSave,\n            setUsers,\n            setBoards\n        }}>\n            {props.children}\n        </OrgContext.Provider>\n    )\n}\n\nexport default OrgContextProvider;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAPA;AACA;AAJA;AAGA;AAHA;AAAA;AACA;AADA;AAWA;AACA;AACA;AACA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAgBA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAJA;AAGA;AAHA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAdA;AAAA;AACA;AADA;AAAA;AAAA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;A","sourceRoot":""}