{"version":3,"file":"static/webpack/static/development/pages/playGame/[findID]/[userID].js.df8b63ddfdb6bbb305d8.hot-update.js","sources":["webpack:///./components/Play/PlayBoard.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\n\n\n// Style imports\nimport { MASTER, COLORS } from '../../styles/masterStyles';\n\n// Data imports\nimport { boardTemplates } from '../../constants/boardSizes';\nimport { checkForRewards } from '../../funcs/boardLogic';\n\n// context imports\nimport { PlayContext } from '../../contexts/playContext';\n\n// Component imports\nimport TaskDetail from './SquareDetail';\nimport RewardDetail from './RewardDetail';\nimport PlayHints from './Tasks/PlayHints';\n\n// Material ui\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\nconst materialStyles = theme => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n    fontSize: 32,\n    color: COLORS.primary,\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(materialStyles)(props => {\n  const { children, classes, onClose } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root}>\n      <Typography variant=\"h6\">{children}</Typography>\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n    </MuiDialogTitle>\n  );\n});\n\nconst PlayBoard = (props) => {\n\n  const { contextGame, saveGame } = useContext(PlayContext);\n\n  const SQUARE_WIDTH = 60 / (Math.sqrt(props.board.numSquares) + 1);\n\n  let taskNum = 1;\n  let taskOrderNum = 0;\n\n  const getNumCompleted = squares => {\n    let numCompleted = 0;\n    squares.map(square => {\n      if(square.complete && !square.freeSquare){\n        numCompleted++;\n      } else if (!square.completed && !square.freeSquare){\n        return\n      }\n    })\n    return numCompleted;\n  }\n\n  const [board, setBoard] = useState(props.board);\n  const [previousSquareComplete, setPreviousSquareComplete] = useState(true);\n  const [numCompleted, setNumCompleted] = useState(getNumCompleted(board.squares))\n  const [rewardDialogOpen, setRewardDialogOpen] = useState(false);\n  const [reward, setReward] = useState({});\n  const [taskDialogOpen, setTaskDialogOpen] = useState(false);\n  const [task, setTask] = useState({});\n  \n  const openRewardDetailPopup = (reward) => {\n    setRewardDialogOpen(true);\n    setReward(reward);\n  }\n\n  const openTaskDetailPopup = (task, previousSquareComplete) => {\n    setTaskDialogOpen(true);\n    setTask(task);\n    setPreviousSquareComplete(previousSquareComplete);\n  }\n\n  useEffect(() => {\n    setBoard(contextGame);\n    setNumCompleted(getNumCompleted(contextGame.squares));\n  }, [contextGame])\n\n  const updateTask = task => {\n    const gameToSave = {\n      ...contextGame, \n      squares: contextGame.squares.map((square) => {\n          if(square._id === task._id){\n            return task;\n          }\n          return square;\n        }\n      )\n    };\n    // run saveGame with the result of checkForRewards\n    let rewardsChanged = false;\n    const earnedRewards = checkForRewards(gameToSave);\n    console.log({earnedRewards})\n    const rewards = contextGame.rewards.map(reward => {\n      if(earnedRewards.includes(reward.position)){\n        if(!reward.earned){\n          console.log('setting reward earned', reward.position)\n          \n          rewardsChanged = true;\n        }\n        return {\n          ...reward,\n          earned: true\n        }\n      } \n      return {\n        ...reward,\n        earned: false\n      }\n    });\n    if(rewardsChanged){\n      console.log('saving reward change')\n      const gameWithRewards = { ...gameToSave, rewards };\n      saveGame(gameWithRewards);   \n    } else {\n      saveGame(gameToSave);\n    }\n  }\n\n  const generateRow = row => {\n    const SOMETHING_RIGHT = contextGame.rewards.filter(reward => (reward.position.includes('row') || reward.position.includes('diagonalUpRight')) && reward.title)[0];\n    return row.map((square, index) => {\n      switch (square.type) {\n        case 'reward':\n          const reward = contextGame.rewards.length ?  contextGame.rewards.filter(reward => reward.position === square.id && reward.title)[0] : null;\n          if(!reward){\n            return <div key={`empty${index}`} \n                      style={{\n                        width: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : `${SQUARE_WIDTH}vw`,\n                        height: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : `${SQUARE_WIDTH}vw`,\n                        // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                        // position: 'relative',\n                        maxWidth: 110,\n                        maxHeight: 110,\n                        minWidth: !SOMETHING_RIGHT && (square.id.includes('row') || square.id.includes('diagonalUpRight')) ? 1 : 100,\n                        // minHeight: 100,\n                      }} \n                    />;\n          }\n          return(\n              <button \n                key={`reward${index}`} \n                style={{\n                  width: `${SQUARE_WIDTH}vw`,\n                  height: `${SQUARE_WIDTH}vw`,\n                  // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  position: 'relative',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  backgroundColor: 'transparent',\n                  border: 'none',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 110,\n                  maxHeight: 110,\n                  // minWidth: 100,\n                  // minHeight: 100,\n                }} \n                onClick={() => openRewardDetailPopup(reward)}\n              >\n                <img \n                  style={{\n                    ...MASTER.smallRewardIcon,\n                    width: '70%',\n                    height: '70%',\n                  }} \n                  src={reward.earned ? '../../static/gift_green.png' : '../../static/gift_gray.png'} \n                />\n              </button>\n          )\n        case 'task':\n          if(!taskNum){\n            return;\n          }\n          const task = contextGame.squares[taskNum - 1];\n          if(taskNum === contextGame.numSquares){\n            taskNum = 0;\n          }else {\n            taskNum++;\n          }\n          if(task.freeSquare){\n            return (\n              <button key={`free${index}`} \n                style={{ \n                  width: `${SQUARE_WIDTH}vw`,\n                  height: `${SQUARE_WIDTH}vw`,\n                  // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  position: 'relative',\n                  backgroundColor: `#${contextGame.completeColor}`,\n                  borderWidth: 1,\n                  borderColor: 'black',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  outline: 'none',\n                  maxWidth: 110,\n                  maxHeight: 110,\n                }}\n              >\n                <img style={MASTER.freeSquareIcon} src={'../../static/circle_check.png'} />\n              </button>\n            )\n          } else {\n            taskOrderNum++;\n            task.taskOrderNum = taskOrderNum;\n            return (\n              <button \n                key={`task${index}`} \n                style={{\n                  width: `${SQUARE_WIDTH}vw`,\n                  height: `${SQUARE_WIDTH}vw`,\n                  // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                  position: 'relative',\n                  backgroundColor: task.complete ? `#${contextGame.completeColor}` : `#${contextGame.incompleteColor}`,\n                  borderWidth: 1,\n                  borderColor: 'black',\n                  display: 'flex',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                  outline: 'none',\n                  cursor: 'pointer',\n                  maxWidth: 110,\n                  maxHeight: 110,\n                }}\n                onClick={() => openTaskDetailPopup(\n                  task, \n                  ((task.taskOrderNum - 1) !== numCompleted)\n                )}\n              >\n                {contextGame.mustBeDoneInOrder && <div style={{ ...MASTER.squareOrderNum, color: task.complete ? `#${contextGame.completeColor}` : `#${contextGame.incompleteColor}` }}>{taskOrderNum}</div>}\n                <div style={{ ...MASTER.squareText, maxHeight: 100 }}>{task.squareText}</div>\n              </button>\n            );\n          }\n        case 'empty':\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}vw`,\n                height: `${SQUARE_WIDTH}vw`,\n                // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                position: 'relative',\n                maxWidth: 110,\n                maxHeight: 110,\n              }} \n            />\n          );\n        default:\n          return (\n            <div key={`empty${index}`} \n              style={{\n                width: `${SQUARE_WIDTH}vw`,\n                height: `${SQUARE_WIDTH}vw`,\n                // paddingTop: `${SQUARE_WIDTH * .72}%`,\n                position: 'relative',\n                maxWidth: 110,\n                maxHeight: 110,\n              }} \n            />\n          );\n      }\n    })\n  }\n\n  const generateBoard = () => {\n    const template = boardTemplates[props.size];\n    return template.spaces.map((row, index) => {\n      return (\n        <div \n          key={`row${index + 1}`} \n          style={{display: 'flex', flexDirection: 'row', width: '100%', justifyContent: 'center'}}\n        >\n          {generateRow(row)}\n        </div>\n      ) \n    });\n  }\n\n  if(props.board){\n    return (\n      <div style={styles.container}>\n        {generateBoard()}\n        <Dialog open={rewardDialogOpen} onBackdropClick={() => setRewardDialogOpen(false)}>\n          <DialogTitle onClose={() => setRewardDialogOpen(false)}>\n            REWARD\n          </DialogTitle>\n          <RewardDetail reward={reward} mustRedeem={contextGame.redeemRewards} />\n        </Dialog>\n        <Dialog open={taskDialogOpen} onBackdropClick={() => setTaskDialogOpen(false)}>\n           <DialogTitle onClose={() => setTaskDialogOpen(false)}>\n            <div style={{ display: 'flex', alignItems: 'center' }}>\n              TASK {task.hints && task.hints.length ? <PlayHints hints={task.hints} /> : null}\n            </div>\n          </DialogTitle>\n          <TaskDetail \n            task={task} \n            updateTask={updateTask} \n            previousSquareComplete={previousSquareComplete}\n            mustBeDoneInOrder={props.board.mustBeDoneInOrder}  \n          />\n        </Dialog>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n  \nconst styles = {\n  container: {\n    flex: 1,\n    width: '100%',\n    backgroundColor: '#fff',\n  },\n};\n\nexport default PlayBoard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAPA;AACA;AACA;AASA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AAAA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAhBA;AAiBA;AAAA;AAAA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AAEA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AAAA;AAAA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhIA;AA4IA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAQA;;;;A","sourceRoot":""}